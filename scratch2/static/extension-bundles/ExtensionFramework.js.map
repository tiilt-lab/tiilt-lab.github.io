{"version":3,"file":"ExtensionFramework.js","sources":["../../../../extensions/src/common/types/enums.ts","../../../../extensions/scripts/node_modules/tslib/tslib.es6.js","../../../../extensions/src/common/utils.ts","../../../../extensions/src/common/globals.ts","../../../../extensions/src/common/ui.ts","../../../../extensions/src/common/IDs.ts","../../../../extensions/src/common/extension/mixins/optional/customSaveData.ts","../../../scratch-vm/src/util/color.js","../../../scratch-vm/src/util/cast.js","../../../../extensions/src/common/cast.ts","../../../../extensions/src/common/extension/mixins/optional/customArguments/CustomArgumentManager.ts","../../../../extensions/src/common/extension/mixins/optional/customArguments/dropdownOverride.ts","../../../../extensions/src/common/extension/mixins/optional/addCostumes/MockBitmapAdapter.ts","../../../../extensions/src/common/extension/mixins/optional/addCostumes/index.ts","../../../../extensions/src/common/extension/mixins/dependencies.ts","../../../../extensions/src/common/extension/mixins/optional/customArguments/index.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/menus.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/util.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/handlers.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/args.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/text.ts","../../../../extensions/src/common/extension/mixins/required/scratchInfo/index.ts","../../../../extensions/src/common/extension/decorators/blocks.ts","../../../../extensions/src/common/extension/decorators/legacySupport/index.ts","../../../../extensions/src/common/extension/mixins/optional/legacySupport.ts","../../../../extensions/src/common/extension/mixins/optional/video.ts","../../../../extensions/src/common/extension/mixins/index.ts","../../../../extensions/src/common/extension/mixins/optional/ui.ts","../../../../extensions/src/common/extension/mixins/optional/drawable.ts","../../../../extensions/src/common/extension/mixins/optional/addCostumes/utils.ts","../../../../extensions/src/common/extension/mixins/optional/blocks/setVideoTransparency.ts","../../../../extensions/src/common/extension/mixins/optional/blocks/toggleVideoState.ts","../../../../extensions/src/common/extension/ExtensionBase.ts","../../../../extensions/src/common/extension/mixins/required/supported.ts","../../../../extensions/src/common/extension/index.ts","../../../../extensions/src/common/extension/GenericExtension.ts","../../../../extensions/src/common/extension/decorators/validators.ts"],"sourcesContent":["import { ValueOf } from \"../types\";\n\n/**\n * The different kind of blocks that an extension can define\n */\nexport const BlockType = {\n  /**\n   * Boolean reporter with hexagonal shape\n   */\n  Boolean: 'Boolean',\n\n  /**\n   * A button (not an actual block) for some special action, like making a variable\n   */\n  Button: 'button',\n\n  /**\n   * Command block\n   */\n  Command: 'command',\n\n  /**\n   * Specialized command block which may or may not run a child branch\n   * The thread continues with the next block whether or not a child branch ran.\n   */\n  Conditional: 'conditional',\n\n  /**\n   * Specialized hat block with no implementation function\n   * This stack only runs if the corresponding event is emitted by other code.\n   */\n  Event: 'event',\n\n  /**\n   * Hat block which conditionally starts a block stack\n   */\n  Hat: 'hat',\n\n  /**\n   * Specialized command block which may or may not run a child branch\n   * If a child branch runs, the thread evaluates the loop block again.\n   */\n  Loop: 'loop',\n\n  /**\n   * General reporter with numeric or string value\n   */\n  Reporter: 'reporter'\n} as const;\n\nexport const ArgumentType = {\n  /** Numeric value with angle picker. */\n  Angle: \"angle\",\n\n  /** Boolean value with hexagonal placeholder. */\n  Boolean: \"Boolean\",\n\n  /** Numeric value with color picker. */\n  Color: \"color\",\n\n  /** Numeric value with text field. */\n  Number: \"number\",\n\n  /** String value with text field. */\n  String: \"string\",\n\n  /** String value with matrix field. */\n  Matrix: \"matrix\",\n\n  /** MIDI note number with note picker (piano) field. */\n  Note: \"note\",\n\n  /** Inline image on block (as part of the label). */\n  Image: \"image\",\n\n  /** Type added by PRG to support custom arguments */\n  Custom: \"custom\"\n} as const;\n\n/**\n * Default types of Target supported by the VM\n * @enum {string} as const;\n */\nexport const TargetType = {\n  /**\n   * Rendered target which can move, change costumes, etc.\n   */\n  Sprite: 'sprite',\n\n  /**\n   * Rendered target which cannot move but can change backdrops\n   */\n  Stage: 'stage'\n} as const;\n\n/**\n * These constants are copied from scratch-blocks/core/constants.js\n * @TODO find a way to require() these straight from scratch-blocks... maybe make a scratch-blocks/dist/constants.js?\n * @readonly\n * @enum {int} as const;\n */\nexport const ScratchBlocksConstants = {\n  /**\n   * ENUM for output shape: hexagonal (booleans/predicates).\n   * @const\n   */\n  OutputShapeHexagonal: 1,\n\n  /**\n   * ENUM for output shape: rounded (numbers).\n   * @const\n   */\n  OutputShapeRound: 2,\n\n  /**\n   * ENUM for output shape: squared (any/all values; strings).\n   * @const\n   */\n  OutputShapeSquare: 3\n} as const;\n\nexport const StageLayering = {\n  BackgroundLayer: 'background',\n  VideoLayer: 'video',\n  PenLayer: 'pen',\n  SpriteLayer: 'sprite',\n} as const;\n\nexport const LayerGroups: readonly ValueOf<typeof StageLayering>[] = [\n  StageLayering.VideoLayer,\n  StageLayering.SpriteLayer,\n  StageLayering.BackgroundLayer,\n  StageLayering.PenLayer,\n] as const;\n\nexport const VariableType = {\n  /**\n   * Type representation for scalar variables.\n   * This is currently represented as ''\n   * for compatibility with blockly.\n   */\n  Scalar: '',\n  /**\n   * Type representation for list variables.\n   */\n  List: 'list',\n\n  BrooadcastMessage: 'broadcast_msg'\n} as const;\n\nexport const Branch = {\n  Exit: 0,\n  Enter: 1,\n  First: 1,\n  Second: 2,\n  Third: 3,\n  Fourth: 4,\n  Fifth: 5,\n  Sixth: 6,\n  Seventh: 7\n} as const;\n\nexport const Language = {\n  Аҧсшәа: 'ab',\n  العربية: 'ar',\n  አማርኛ: 'am',\n  Azeri: 'az',\n  Bahasa_Indonesia: 'id',\n  Беларуская: 'be',\n  Български: 'bg',\n  Català: 'ca',\n  Česky: 'cs',\n  Cymraeg: 'cy',\n  Dansk: 'da',\n  Deutsch: 'de',\n  Eesti: 'et',\n  Ελληνικά: 'el',\n  English: 'en',\n  Español: 'es',\n  Español_Latinoamericano: 'es-419',\n  Euskara: 'eu',\n  فارسی: 'fa',\n  Français: 'fr',\n  Gaeilge: 'ga',\n  Gàidhlig: 'gd',\n  Galego: 'gl',\n  한국어: 'ko',\n  עִבְרִית: 'he',\n  Hrvatski: 'hr',\n  isiZulu: 'zu',\n  Íslenska: 'is',\n  Italiano: 'it',\n  ქართული_ენა: 'ka',\n  Kiswahili: 'sw',\n  Kreyòl_ayisyen: 'ht',\n  کوردیی_ناوەندی: 'ckb',\n  Latviešu: 'lv',\n  Lietuvių: 'lt',\n  Magyar: 'hu',\n  Māori: 'mi',\n  Nederlands: 'nl',\n  日本語: 'ja',\n  にほんご: 'ja-Hira',\n  Norsk_Bokmål: 'nb',\n  Norsk_Nynorsk: 'nn',\n  Oʻzbekcha: 'uz',\n  ไทย: 'th',\n  ភាសាខ្មែរ: 'km',\n  Polski: 'pl',\n  Português: 'pt',\n  Português_Brasileiro: 'pt-br',\n  Rapa_Nui: 'rap',\n  Română: 'ro',\n  Русский: 'ru',\n  Српски: 'sr',\n  Slovenčina: 'sk',\n  Slovenščina: 'sl',\n  Suomi: 'fi',\n  Svenska: 'sv',\n  Tiếng_Việt: 'vi',\n  Türkçe: 'tr',\n  Українська: 'uk',\n  简体中文: 'zh-cn',\n  繁體中文: 'zh-tw'\n} as const;\n\nexport const LanguageKeys = Object.keys(Language);\n\nexport const RuntimeEvent = {\n  /**\n   * Event name for glowing a script.\n   */\n  ScriptGlowOn: 'SCRIPT_GLOW_ON',\n  /**\n   * Event name for unglowing a script.\n   */\n  ScriptGlowOff: 'SCRIPT_GLOW_OFF',\n  /**\n   * Event name for glowing a block.\n   */\n  BlockGlowOn: 'BLOCK_GLOW_ON',\n  /**\n   * Event name for unglowing a block.\n   */\n  BlockGlowOff: 'BLOCK_GLOW_OFF',\n  /**\n   * Event name for a cloud data update to this project.\n   */\n  HasCloudDataUpdate: 'HAS_CLOUD_DATA_UPDATE',\n  /**\n   * Event name for turning on turbo mode.\n   */\n  TurboModeOn: 'TURBO_MODE_ON',\n  /**\n   * Event name for turning off turbo mode.\n   */\n  TurboModeOff: 'TURBO_MODE_OFF',\n  /**\n   * Event name for turning on turbo mode.\n   */\n  RecordingOn: 'RECORDING_ON',\n  /**\n   * Event name for turning off turbo mode.\n   */\n  RecordingOff: 'RECORDING_OFF',\n  /**\n   * Event name when the project is started (threads may not necessarily be running).\n   */\n  ProjectStart: 'PROJECT_START',\n  /**\n   * Event name when threads start running.\n   * Used by the UI to indicate running status.\n   */\n  ProjectRunStart: 'PROJECT_RUN_START',\n  /**\n   * Event name when threads stop running\n   * Used by the UI to indicate not-running status.\n   */\n  ProjectRunStop: 'PROJECT_RUN_STOP',\n  /**\n   * Event name for project being stopped or restarted by the user.\n   * Used by blocks that need to reset state.\n   */\n  ProjectStopAll: 'PROJECT_STOP_ALL',\n  /**\n   * Event name for target being stopped by a stop for target call.\n   * Used by blocks that need to stop individual targets.\n   */\n  StopForTarget: 'STOP_FOR_TARGET',\n  /**\n   * Event name for visual value report.\n   */\n  VisualReport: 'VISUAL_REPORT',\n  /**\n   * Event name for project loaded report.\n   */\n  ProjectLoaded: 'PROJECT_LOADED',\n  /**\n   * Event name for report that a change was made that can be saved\n   */\n  ProjectChanged: 'PROJECT_CHANGED',\n  /**\n   * Event name for report that a change was made to an extension in the toolbox.\n   */\n  ToolboxExtensionsNeedUpdate: 'TOOLBOX_EXTENSIONS_NEED_UPDATE',\n  /**\n   * Event name for targets update report.\n   */\n  TargetsUpdate: 'TARGETS_UPDATE',\n  /**\n   * Event name for monitors update.\n   */\n  MonitorsUpdate: 'MONITORS_UPDATE',\n  /**\n   * Event name for block drag update.\n   */\n  BlockDragUpdate: 'BLOCK_DRAG_UPDATE',\n  /**\n   * Event name for block drag end.\n   */\n  BlockDragEnd: 'BLOCK_DRAG_END',\n  /**\n   * Event name for reporting that an extension was added.\n   */\n  ExtensionAdded: 'EXTENSION_ADDED',\n  /**\n   * Event name for reporting that an extension as asked for a custom field to be added\n   */\n  ExtensionFieldAdded: 'EXTENSION_FIELD_ADDED',\n  /**\n   * Event name for updating the available set of peripheral devices.\n   * This causes the peripheral connection modal to update a list of available peripherals.\n   */\n  PeripheralListUpdate: 'PERIPHERAL_LIST_UPDATE',\n  /**\n   * Event name for reporting that a peripheral has connected.\n   * This causes the status button in the blocks menu to indicate 'connected'.\n   */\n  PeripheralConnected: 'PERIPHERAL_CONNECTED',\n  /**\n   * Event name for reporting that a peripheral has been intentionally disconnected.\n   * This causes the status button in the blocks menu to indicate 'disconnected'.\n   */\n  PeripheralDisconnected: 'PERIPHERAL_DISCONNECTED',\n  /**\n   * Event name for reporting that a peripheral has encountered a request error.\n   * This causes the peripheral connection modal to switch to an error state.\n   */\n  PeripheralRequestError: 'PERIPHERAL_REQUEST_ERROR',\n  /**\n   * Event name for reporting that a peripheral connection has been lost.\n   * This causes a 'peripheral connection lost' error alert to display.\n   */\n  PeripheralConnectionLostError: 'PERIPHERAL_CONNECTION_LOST_ERROR',\n  /**\n   * Event name for reporting that a peripheral has not been discovered.\n   * This causes the peripheral connection modal to show a timeout state.\n   */\n  PeripheralScanTimeout: 'PERIPHERAL_SCAN_TIMEOUT',\n  /**\n   * Event name to indicate that the microphone is being used to stream audio.\n   */\n  MicListening: 'MIC_LISTENING',\n  /**\n   * Event name for reporting that blocksInfo was updated.\n   */\n  BlocksInfoUpdate: 'BLOCKSINFO_UPDATE',\n  /**\n   * Event name when the runtime tick loop has been started.\n   */\n  RuntimeStarted: 'RUNTIME_STARTED',\n  /**\n   * Event name when the runtime dispose has been called.\n   */\n  RuntimeDisposed: 'RUNTIME_DISPOSED',\n  /**\n   * Event name for reporting that a block was updated and needs to be rerendered.\n   */\n  BlocksNeedUpdate: 'BLOCKS_NEED_UPDATE',\n} as const;\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { MenuItem, Primitive, RGBObject } from \"./types\"\n\ntype FetchParams = {\n  request: Parameters<typeof fetch>[0],\n  options: Parameters<typeof fetch>[1]\n}\n\nexport const getValueFromMenuItem = <T>(item: MenuItem<T>) => typeof item === \"object\" ? (item as { value: T }).value : item;\n\nexport const getTextFromMenuItem = <T>(item: MenuItem<T>) => typeof item === \"object\" ? (item as { text: string }).text : item;\n\nexport async function fetchWithTimeout(\n  resource: FetchParams[\"request\"],\n  options: FetchParams[\"options\"] & { timeout: number }\n) {\n  const { timeout } = options;\n\n  const controller = new AbortController();\n  const id = setTimeout(() => controller.abort(), timeout);\n\n  const response = await fetch(resource, {\n    ...options,\n    signal: controller.signal\n  });\n\n  clearTimeout(id);\n\n  return response;\n}\n\n/**\n * A utility to wait a certain amount of milliseconds in an async function.\n * @param timeMs \n * @returns \n */\nexport async function untilTimePassed(timeMs: number) {\n  let timeout: NodeJS.Timeout;\n  return await new Promise<void>(\n    (resolve) =>\n      timeout = setTimeout(\n        () => {\n          clearTimeout(timeout);\n          resolve();\n        },\n        timeMs)\n  );\n}\n\nexport async function untilObject<T>(getter: () => T, delay: number = 100): Promise<T> {\n  let timeout: NodeJS.Timeout;\n  let value: T = getter();\n  while (!value) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n    value = getter();\n  }\n  clearTimeout(timeout);\n  return value;\n}\n\nexport async function untilCondition(condition: () => boolean, delay: number = 100): Promise<void> {\n  let timeout: NodeJS.Timeout;\n  while (!condition()) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n  }\n  clearTimeout(timeout);\n};\n\nexport async function untilReady<T extends { ready: boolean }>(obj: T, delay: number = 100): Promise<void> {\n  let timeout: NodeJS.Timeout;\n  while (!obj.ready) {\n    await new Promise(resolve => {\n      clearTimeout(timeout);\n      timeout = setTimeout(resolve, delay);\n    });\n  }\n  clearTimeout(timeout);\n};\n\nexport const isString = (query: any): query is string => typeof query === 'string' || query instanceof String;\n\nexport const isFunction = (query: any): query is (...args: any[]) => any =>\n  Object.prototype.toString.call(query) === \"[object Function]\"\n  || \"function\" === typeof query\n  || query instanceof Function;\n\nexport const isPrimitive = (query: any): query is Primitive => query !== Object(query);\n\nexport const splitOnCapitals = (query: string) => query.split(/(?=[A-Z])/);\n\n/**\n * A type safe utility function for copy values from one object to another\n * @param param0 object containing the target to copy values to and the source of the values to copy\n */\nexport const copyTo = <TTarget extends object, TSource extends { [k in keyof TTarget]?: TTarget[k] }>({ target, source }: { target: TTarget, source: TSource }) => {\n  for (const key in source) {\n    if (!(key in target)) continue;\n    // @ts-ignore -- the types of the function should ensure this is valid TS\n    target[key] = source[key]\n  }\n}\n\nexport const identity = (x: any) => x;\n\nexport const loadExternalScript = (url: string, onLoad: () => void, onError?: () => void) => {\n  const script = document.createElement('script');\n\n  script.onload = onLoad;\n\n  script.onerror = onError ?? (() => {\n    throw new Error(`Error loading endpoint: ${url}`)\n  });\n\n  script.src = url;\n  script.async = true;\n\n  document.body.appendChild(script);\n}\n\n/**\n * \n * @param url \n * @returns \n */\nexport const untilExternalScriptLoaded = async (url: string): Promise<void> => {\n  const scriptLoaded = new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.onload = resolve;\n    script.onerror = reject;\n    script.async = true;\n    script.src = url;\n    document.body.appendChild(script);\n  });\n  await scriptLoaded;\n  return;\n}\n\n/**\n * \n * @param url \n * @param globalVariableName \n * @returns \n */\nexport const untilExternalGlobalVariableLoaded = async <T>(url: string, globalVariableName: string): Promise<T> => {\n  if (window[globalVariableName]) return window[globalVariableName];\n  await untilExternalScriptLoaded(url);\n  return window[globalVariableName];\n}\n\n/**\n * Utilize javascript's \"call\" method (on Function.prototype) in a typesafe manner\n * @param fn \n * @param _this \n * @param args \n * @returns \n */\nexport const typesafeCall = <Args extends any[], Return, This, Fn extends (this: This, ...args: Args) => Return>(fn: Fn, _this: This, ...args: Args) => fn.call(_this, ...args) as Return;\n\nexport const set = <T extends object, K extends keyof T>(container: T, key: K, value: T[K]) => {\n  container[key] = value;\n  return container;\n}\n\nexport const assertSameLength = (...collections: any[][]) => {\n  const { size } = collections.reduce((set, { length }) => set.add(length), new Set<number>());\n  if (size !== 1) throw new Error(\"Zip failed because collections weren't equal length\");\n}\n\n/**\n * Convert a Scratch decimal color to a hex string, #RRGGBB.\n * @param {number} decimal RGB color as a decimal.\n * @return {string} RGB color as #RRGGBB hex string.\n */\nconst decimalToHex = (decimal: number) => {\n  if (decimal < 0) {\n    decimal += 0xFFFFFF + 1;\n  }\n  let hex = Number(decimal).toString(16);\n  hex = `#${'000000'.substr(0, 6 - hex.length)}${hex}`;\n  return hex;\n}\n\n/**\n * Convert an RGB color object to a Scratch decimal color.\n * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n * @return {!number} Number representing the color.\n */\nfunction rgbToDecimal(rgb: RGBObject) {\n  return (rgb.r << 16) + (rgb.g << 8) + rgb.b;\n}\n\n/**\n * Convert an RGB color object to a hex color.\n * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n * @return {!string} Hex representation of the color.\n */\nexport const rgbToHex = (rgb: RGBObject) => {\n  return decimalToHex(rgbToDecimal(rgb));\n}","export const openUIEvent = \"OPEN_UI_FROM_EXTENSION\";\nexport const registerButtonCallbackEvent = \"REGISTER_BUTTON_CALLBACK_FROM_EXTENSION\";\nexport const FrameworkID = \"ExtensionFramework\";\nexport const AuxiliaryExtensionInfo = \"AuxiliaryExtensionInfo\";\n\nexport const customArgumentFlag = \"internal_IsCustomArgument\";\nexport const customArgumentCheck = \"isCustomArgumentHack\";\nexport const dropdownStateFlag = \"dropdownState\";\nexport const dropdownEntryFlag = \"dropdownEntry\";\nexport const initDropdownState = \"init\";\nexport const openDropdownState = \"open\";\nexport const closeDropdownState = \"close\"; ","import Runtime from \"$scratch-vm/engine/runtime\";\nimport { Extension as BaseExtension } from \"./extension/GenericExtension\";\nimport { openUIEvent, registerButtonCallbackEvent } from \"./globals\";\n\nexport type ReactivityDependency = any | any[];\n\nexport const activeClass = true;\n\nexport const px = (numberOf: number) => `${numberOf}px`;\n\ntype UniqueKeys<Extension> = Exclude<keyof Extension, keyof BaseExtension<any, any>>;\ntype Methods<Extension> = { [K in UniqueKeys<Extension>]-?: Extension[K] extends (...args: any) => any ? K : never };\ntype Properties<Extension> = { [K in UniqueKeys<Extension>]-?: Extension[K] extends (...args: any) => any ? never : K };\ntype MethodParams<Extension> = { [Key in UniqueKeys<Extension>]: Extension[Key] extends (...args: any) => any ? Parameters<Extension[Key]> : never };\ntype MethodReturns<Extension> = { [Key in UniqueKeys<Extension>]: Extension[Key] extends (...args: any) => any ? ReturnType<Extension[Key]> : never };\n\nexport type ReactiveInvoke<Extension> = <T extends keyof Methods<Extension>>(funcName: Methods<Extension>[T] extends never ? never : T, ...args: MethodParams<Extension>[T]) => MethodReturns<Extension>[T];\nexport type ReactiveSet<Extension> = <T extends keyof Properties<Extension>>(propertyName: Properties<Extension>[T] extends never ? never : T, value: Extension[T]) => void;\n\nexport type ReactiveMethods<Extension> = {\n  invoke: ReactiveInvoke<Extension>;\n  set: ReactiveSet<Extension>;\n}\n\nexport const reactiveInvoke = <Extension, T extends keyof Methods<Extension>>(extensionAssignment: Extension, funcName: T, args: MethodParams<Extension>[T]): MethodReturns<Extension>[T] => {\n  return (extensionAssignment[funcName] as Function)(...args as []);\n}\n\nexport const reactiveSet = <Extension, T extends keyof Properties<Extension>>(extensionAssignment: Extension, propertyName: T, value: Extension[T]): void => {\n  extensionAssignment[propertyName] = value;\n}\n\nexport const openUI = (runtime: Runtime, details: { id: string, name: string, component: string, label?: string }) => runtime.emit(openUIEvent, details);\n\nexport const registerButtonCallback = (runtime: Runtime, buttonID: string, callback: (...args: any[]) => void) => {\n  runtime.emit(registerButtonCallbackEvent, buttonID);\n  runtime.on(buttonID, callback);\n}\n\nconst enum Color {\n  ui = \"ui\",\n  text = \"text\",\n  motion = \"motion\",\n  red = \"red\",\n  sound = \"sound\",\n  control = \"control\",\n  data = \"data\",\n  pen = \"pen\",\n  error = \"error\",\n  extensions = \"extensions\",\n  drop = \"drop\"\n}\n\n/**\n * Makes it easier to reference the css color variables defined in prg-extension-boilerplate/packages/scratch-gui/src/components/programmatic-modal/programmatic-modal.jsx\n */\nclass CssVar {\n  root: Color;\n\n  constructor(root: Color) { this.root = root }\n\n  get(...parts: string[]) { return `var(--${this.root}-${parts.join(\"-\")})` }\n  primary(...parts: string[]) { return this.get(\"primary\", ...parts) }\n  secondary(...parts: string[]) { return this.get(\"secondary\", ...parts) }\n  tertiary(...parts: string[]) { return this.get(\"tertiary\", ...parts) }\n  transparent(...parts: string[]) { return this.get(\"transparent\", ...parts) }\n  light(...parts: string[]) { return this.get(\"light\", ...parts) }\n}\n\nconst ui = new CssVar(Color.ui);\nconst text = new CssVar(Color.text);\nconst motion = new CssVar(Color.motion);\nconst red = new CssVar(Color.red);\nconst sound = new CssVar(Color.sound);\nconst control = new CssVar(Color.control);\nconst data = new CssVar(Color.data);\nconst pen = new CssVar(Color.pen);\nconst error = new CssVar(Color.error);\nconst extensions = new CssVar(Color.extensions);\nconst drop = new CssVar(Color.extensions);\n\n/**\n * Color variable references corresponding to the css variables defined in prg-extension-boilerplate/packages/scratch-gui/src/components/programmatic-modal/programmatic-modal.jsx\n */\nexport const color = {\n  \"ui\": {\n    primary: ui.primary(),\n    secondary: ui.secondary(),\n    tertiary: ui.tertiary(),\n    modalOverlay: ui.get(\"modal\", \"overlay\"),\n    white: ui.get(\"white\"),\n    whiteDim: ui.get(\"white\", \"dim\"),\n    whiteTransparent: ui.get(\"white\", \"transparent\"),\n    transparent: ui.transparent(),\n    blackTransparent: ui.get(\"black\", \"transparent\"),\n  },\n  \"text\": {\n    primary: text.primary(),\n    primaryTransparent: text.transparent(),\n  },\n  \"motion\": {\n    primary: motion.primary(),\n    tertiary: motion.tertiary(),\n    transparent: motion.get(\"transparent\"),\n    lightTansparent: motion.light(\"transparent\"),\n  },\n  \"red\": {\n    primary: red.primary(),\n    tertiary: red.tertiary(),\n  },\n  \"sound\": {\n    primary: sound.primary(),\n    tertiary: sound.tertiary(),\n  },\n  \"control\": {\n    primary: control.primary(),\n  },\n  \"data\": {\n    primary: data.primary(),\n  },\n  \"pen\": {\n    primary: pen.primary(),\n    transparent: pen.transparent(),\n  },\n  \"error\": {\n    primary: error.primary(),\n    light: error.light(),\n    transparent: error.transparent(),\n  },\n  \"extensions\": {\n    primary: extensions.primary(),\n    tertiary: extensions.tertiary(),\n    light: extensions.light(),\n    transparent: extensions.transparent(),\n  },\n  \"drop\": {\n    highlight: drop.get(\"highlight\")\n  }\n}","const validRegEx = new RegExp('^[a-z0-9]+$', 'i');\nconst invalidRegEx = new RegExp('[^a-z0-9]+', 'gi');\n\nexport const isValidID = (id) => validRegEx.test(id);\n\nconst guard = 'prg';\nconst guards = [guard, guard.split(\"\").reverse().join(\"\")];\n\nconst guardsRegEx = new RegExp(`${guards[0]}([0-9]+)${guards[1]}`, 'g');\n\nconst wrap = (str) => `${guards[0]}${str}${guards[1]}`;\n\nconst replaceAll = (query, current, desired) => query.replaceAll(current, desired);\n\nexport const encode = (query: string): string => {\n  const matches = [...query.matchAll(invalidRegEx)];\n  const invalidCharacters = matches.reduce((set, current) => {\n    current[0].split(\"\").forEach(char => set.add(char));\n    return set;\n  }, new Set<string>());\n  const replacements = [...invalidCharacters].map(char => ({ char, code: char.charCodeAt(0) }));\n  return replacements.reduce((modified, { char, code }) => replaceAll(modified, char, wrap(code)), `${query}`);\n}\n\nexport const decode = (query: string): string => {\n  const matches = [...query.matchAll(guardsRegEx)];\n  const replacements = matches.reduce((replacements, match) => {\n    const [key, code] = match;\n    return replacements.set(key, String.fromCharCode(code as any as number));\n  }, new Map());\n  return [...replacements].reduce((modified, [current, desired]) => replaceAll(modified, current, desired), `${query}`);\n}","import { BaseGenericExtension, NonAbstractConstructor } from \"$common/types\";\nimport { MinimalExtensionConstructor } from \"../required\";\nimport { ExtensionIntanceWithFunctionality } from \"..\";\n\n/**\n * WARNING! If you change this key, it will affect already saved projects.\n * Do not rename this without first developing a mechanism for searching for previously used keys.\n */\nexport const saveDataKey = \"customSaveDataPerExtension\" as const;\n\n/**\n * @summary Utility class to assist in creating a (typesafe) object that, for a given Extension type, handles both:\n * - writing out data on save\n * - doing something with save data on load\n * \n * @description This class's constructor takes an object with both an `onSave` and an `onLoad` method\n * (and the `onSave`'s return type must match `onLoad`'s argument type)\n * @example\n * new SaveDataHandler({\n *    Extension: MyExtension,\n *    onSave: () => ({x: 0, y: 3}),\n *    onLoad: (data) => {\n *       const sum = data.x + data.y; // do something with saved data\n *    }\n * })\n * @todo Remove the `BaseGenericExtension` Generic Type restraint once Generic Extensions are no longer supported\n */\nexport class SaveDataHandler<T extends BaseGenericExtension | ExtensionIntanceWithFunctionality<[\"customSaveData\"]>, TData> {\n  constructor(public hooks: {\n    // @ts-ignore\n    Extension: NonAbstractConstructor<T>,\n    onSave: (self: T) => TData,\n    onLoad: (self: T, data: TData) => void,\n  }) { }\n}\n\n/**\n * Mixin the ability for extensions to save and reload custom data (including any data related to custom arguments)\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function mixin<T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithCustomSaveDataSupport extends Ctor {\n    /**\n     * Optional field that can be defined if you need to save custom data for an extension \n     * (like some extension specific variable, or an API endpoint).\n     * @example\n     * class Example extends Extension<..., ...> {\n     *    someValue = 5;\n     *    ...\n     *    saveDataHandler = new SaveDataHandler({\n     *      Extension: Example,\n     *      // NOTE: The type info for 'instance' could be left off in the line below\n     *      onSave: (instance: Example) => ({ valueToSave: instance.someValue }),\n     *      onLoad: (instance, data) => instance.someValue = data.valueToSave\n     *    })\n     * }\n     * @see Extension.MakeSaveDataHandler\n     */\n    protected saveDataHandler: SaveDataHandler<ExtensionWithCustomSaveDataSupport, any> = undefined;\n\n    /**\n     * Save function called 'internally' by the VM when serializing a project.\n     * @param toSave \n     * @param extensionIDs \n     * @returns \n     */\n    private save(toSave: { [saveDataKey]: Record<string, any> }, extensionIDs: Set<string>) {\n      const { saveDataHandler, id } = this;\n      const argumentManager = this.supports(\"customArguments\") ? this.customArgumentManager : null;\n      const saveData = saveDataHandler?.hooks.onSave(this) ?? {};\n      argumentManager?.saveTo(saveData);\n      if (Object.keys(saveData).length === 0) return;\n      const container = toSave[saveDataKey];\n      container ? (container[id] = saveData) : (toSave[saveDataKey] = { [id]: saveData });\n      extensionIDs.add(id);\n    }\n\n    /**\n     * Load function called 'internally' by the VM when loading a project.\n     * Will be invoked on an extension immediately after it is constructed.\n     * @param saved \n     * @returns \n     */\n    private load(saved: { [saveDataKey]: Record<string, any> }) {\n      if (!saved) return;\n      const { saveDataHandler, id } = this;\n      const saveData = saveDataKey in saved ? saved[saveDataKey][id] : null;\n      if (!saveData) return;\n      saveDataHandler?.hooks.onLoad(this, saveData);\n\n      if (this.supports(\"customArguments\")) this.getOrCreateCustomArgumentManager().loadFrom(saveData);\n    }\n  }\n  return ExtensionWithCustomSaveDataSupport;\n}","class Color {\n    /**\n     * @typedef {object} RGBObject - An object representing a color in RGB format.\n     * @property {number} r - the red component, in the range [0, 255].\n     * @property {number} g - the green component, in the range [0, 255].\n     * @property {number} b - the blue component, in the range [0, 255].\n     */\n\n    /**\n     * @typedef {object} HSVObject - An object representing a color in HSV format.\n     * @property {number} h - hue, in the range [0-359).\n     * @property {number} s - saturation, in the range [0,1].\n     * @property {number} v - value, in the range [0,1].\n     */\n\n    /** @type {RGBObject} */\n    static get RGB_BLACK() {\n        return { r: 0, g: 0, b: 0 };\n    }\n\n    /** @type {RGBObject} */\n    static get RGB_WHITE() {\n        return { r: 255, g: 255, b: 255 };\n    }\n\n    /**\n     * Convert a Scratch decimal color to a hex string, #RRGGBB.\n     * @param {number} decimal RGB color as a decimal.\n     * @return {string} RGB color as #RRGGBB hex string.\n     */\n    static decimalToHex(decimal) {\n        if (decimal < 0) {\n            decimal += 0xffffff + 1;\n        }\n        let hex = Number(decimal).toString(16);\n        hex = `#${\"000000\".substr(0, 6 - hex.length)}${hex}`;\n        return hex;\n    }\n\n    /**\n     * Convert a Scratch decimal color to an RGB color object.\n     * @param {number} decimal RGB color as decimal.\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static decimalToRgb(decimal) {\n        const a = (decimal >> 24) & 0xff;\n        const r = (decimal >> 16) & 0xff;\n        const g = (decimal >> 8) & 0xff;\n        const b = decimal & 0xff;\n        return { r: r, g: g, b: b, a: a > 0 ? a : 255 };\n    }\n\n    /**\n     * Convert a hex color (e.g., F00, #03F, #0033FF) to an RGB color object.\n     * CC-BY-SA Tim Down:\n     * https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n     * @param {!string} hex Hex representation of the color.\n     * @return {RGBObject} null on failure, or rgb: {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static hexToRgb(hex) {\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(\n            shorthandRegex,\n            (m, r, g, b) => r + r + g + g + b + b\n        );\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result\n            ? {\n                  r: parseInt(result[1], 16),\n                  g: parseInt(result[2], 16),\n                  b: parseInt(result[3], 16),\n              }\n            : null;\n    }\n\n    /**\n     * Convert an RGB color object to a hex color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!string} Hex representation of the color.\n     */\n    static rgbToHex(rgb) {\n        return Color.decimalToHex(Color.rgbToDecimal(rgb));\n    }\n\n    /**\n     * Convert an RGB color object to a Scratch decimal color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!number} Number representing the color.\n     */\n    static rgbToDecimal(rgb) {\n        return (rgb.r << 16) + (rgb.g << 8) + rgb.b;\n    }\n\n    /**\n     * Convert a hex color (e.g., F00, #03F, #0033FF) to a decimal color number.\n     * @param {!string} hex Hex representation of the color.\n     * @return {!number} Number representing the color.\n     */\n    static hexToDecimal(hex) {\n        return Color.rgbToDecimal(Color.hexToRgb(hex));\n    }\n\n    /**\n     * Convert an HSV color to RGB format.\n     * @param {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n    static hsvToRgb(hsv) {\n        let h = hsv.h % 360;\n        if (h < 0) h += 360;\n        const s = Math.max(0, Math.min(hsv.s, 1));\n        const v = Math.max(0, Math.min(hsv.v, 1));\n\n        const i = Math.floor(h / 60);\n        const f = h / 60 - i;\n        const p = v * (1 - s);\n        const q = v * (1 - s * f);\n        const t = v * (1 - s * (1 - f));\n\n        let r;\n        let g;\n        let b;\n\n        switch (i) {\n            default:\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            case 5:\n                r = v;\n                g = p;\n                b = q;\n                break;\n        }\n\n        return {\n            r: Math.floor(r * 255),\n            g: Math.floor(g * 255),\n            b: Math.floor(b * 255),\n        };\n    }\n\n    /**\n     * Convert an RGB color to HSV format.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     */\n    static rgbToHsv(rgb) {\n        const r = rgb.r / 255;\n        const g = rgb.g / 255;\n        const b = rgb.b / 255;\n        const x = Math.min(Math.min(r, g), b);\n        const v = Math.max(Math.max(r, g), b);\n\n        // For grays, hue will be arbitrarily reported as zero. Otherwise, calculate\n        let h = 0;\n        let s = 0;\n        if (x !== v) {\n            const f = r === x ? g - b : g === x ? b - r : r - g;\n            const i = r === x ? 3 : g === x ? 5 : 1;\n            h = ((i - f / (v - x)) * 60) % 360;\n            s = (v - x) / v;\n        }\n\n        return { h: h, s: s, v: v };\n    }\n\n    /**\n     * Linear interpolation between rgb0 and rgb1.\n     * @param {RGBObject} rgb0 - the color corresponding to fraction1 <= 0.\n     * @param {RGBObject} rgb1 - the color corresponding to fraction1 >= 1.\n     * @param {number} fraction1 - the interpolation parameter. If this is 0.5, for example, mix the two colors equally.\n     * @return {RGBObject} the interpolated color.\n     */\n    static mixRgb(rgb0, rgb1, fraction1) {\n        if (fraction1 <= 0) return rgb0;\n        if (fraction1 >= 1) return rgb1;\n        const fraction0 = 1 - fraction1;\n        return {\n            r: fraction0 * rgb0.r + fraction1 * rgb1.r,\n            g: fraction0 * rgb0.g + fraction1 * rgb1.g,\n            b: fraction0 * rgb0.b + fraction1 * rgb1.b,\n        };\n    }\n}\n\nmodule.exports = Color;\n","const Color = require(\"../util/color\");\n\n/**\n * @fileoverview\n * Utilities for casting and comparing Scratch data-types.\n * Scratch behaves slightly differently from JavaScript in many respects,\n * and these differences should be encapsulated below.\n * For example, in Scratch, add(1, join(\"hello\", world\")) -> 1.\n * This is because \"hello world\" is cast to 0.\n * In JavaScript, 1 + Number(\"hello\" + \"world\") would give you NaN.\n * Use when coercing a value before computation.\n */\n\nclass Cast {\n    /**\n     * Scratch cast to number.\n     * Treats NaN as 0.\n     * In Scratch 2.0, this is captured by `interp.numArg.`\n     * @param {*} value Value to cast to number.\n     * @return {number} The Scratch-casted number value.\n     */\n    static toNumber(value) {\n        // If value is already a number we don't need to coerce it with\n        // Number().\n        if (typeof value === \"number\") {\n            // Scratch treats NaN as 0, when needed as a number.\n            // E.g., 0 + NaN -> 0.\n            if (Number.isNaN(value)) {\n                return 0;\n            }\n            return value;\n        }\n        const n = Number(value);\n        if (Number.isNaN(n)) {\n            // Scratch treats NaN as 0, when needed as a number.\n            // E.g., 0 + NaN -> 0.\n            return 0;\n        }\n        return n;\n    }\n\n    /**\n     * Scratch cast to boolean.\n     * In Scratch 2.0, this is captured by `interp.boolArg.`\n     * Treats some string values differently from JavaScript.\n     * @param {*} value Value to cast to boolean.\n     * @return {boolean} The Scratch-casted boolean value.\n     */\n    static toBoolean(value) {\n        // Already a boolean?\n        if (typeof value === \"boolean\") {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            // These specific strings are treated as false in Scratch.\n            if (\n                value === \"\" ||\n                value === \"0\" ||\n                value.toLowerCase() === \"false\"\n            ) {\n                return false;\n            }\n            // All other strings treated as true.\n            return true;\n        }\n        // Coerce other values and numbers.\n        return Boolean(value);\n    }\n\n    /**\n     * Scratch cast to string.\n     * @param {*} value Value to cast to string.\n     * @return {string} The Scratch-casted string value.\n     */\n    static toString(value) {\n        return String(value);\n    }\n\n    /**\n     * Cast any Scratch argument to an RGB color array to be used for the renderer.\n     * @param {*} value Value to convert to RGB color array.\n     * @return {Array.<number>} [r,g,b], values between 0-255.\n     */\n    static toRgbColorList(value) {\n        const color = Cast.toRgbColorObject(value);\n        return [color.r, color.g, color.b];\n    }\n\n    /**\n     * Cast any Scratch argument to an RGB color object to be used for the renderer.\n     * @param {*} value Value to convert to RGB color object.\n     * @return {import(\"../typescript-support/types\").RGBObject} [r,g,b], values between 0-255.\n     */\n    static toRgbColorObject(value) {\n        let color;\n        if (typeof value === \"string\" && value.substring(0, 1) === \"#\") {\n            color = Color.hexToRgb(value);\n            // If the color wasn't *actually* a hex color, cast to black\n            if (!color) color = {r: 0, g: 0, b: 0, a: 255};\n        } else {\n            color = Color.decimalToRgb(Cast.toNumber(value));\n        }\n        return color;\n    }\n\n    /**\n     * Determine if a Scratch argument is a white space string (or null / empty).\n     * @param {*} val value to check.\n     * @return {boolean} True if the argument is all white spaces or null / empty.\n     */\n    static isWhiteSpace(val) {\n        return (\n            val === null || (typeof val === \"string\" && val.trim().length === 0)\n        );\n    }\n\n    /**\n     * Compare two values, using Scratch cast, case-insensitive string compare, etc.\n     * In Scratch 2.0, this is captured by `interp.compare.`\n     * @param {*} v1 First value to compare.\n     * @param {*} v2 Second value to compare.\n     * @returns {number} Negative number if v1 < v2; 0 if equal; positive otherwise.\n     */\n    static compare(v1, v2) {\n        let n1 = Number(v1);\n        let n2 = Number(v2);\n        if (n1 === 0 && Cast.isWhiteSpace(v1)) {\n            n1 = NaN;\n        } else if (n2 === 0 && Cast.isWhiteSpace(v2)) {\n            n2 = NaN;\n        }\n        if (isNaN(n1) || isNaN(n2)) {\n            // At least one argument can't be converted to a number.\n            // Scratch compares strings as case insensitive.\n            const s1 = String(v1).toLowerCase();\n            const s2 = String(v2).toLowerCase();\n            if (s1 < s2) {\n                return -1;\n            } else if (s1 > s2) {\n                return 1;\n            }\n            return 0;\n        }\n        // Handle the special case of Infinity\n        if (\n            (n1 === Infinity && n2 === Infinity) ||\n            (n1 === -Infinity && n2 === -Infinity)\n        ) {\n            return 0;\n        }\n        // Compare as numbers.\n        return n1 - n2;\n    }\n\n    /**\n     * Determine if a Scratch argument number represents a round integer.\n     * @param {*} val Value to check.\n     * @return {boolean} True if number looks like an integer.\n     */\n    static isInt(val) {\n        // Values that are already numbers.\n        if (typeof val === \"number\") {\n            if (isNaN(val)) {\n                // NaN is considered an integer.\n                return true;\n            }\n            // True if it's \"round\" (e.g., 2.0 and 2).\n            return val === parseInt(val, 10);\n        } else if (typeof val === \"boolean\") {\n            // `True` and `false` always represent integer after Scratch cast.\n            return true;\n        } else if (typeof val === \"string\") {\n            // If it contains a decimal point, don't consider it an int.\n            return val.indexOf(\".\") < 0;\n        }\n        return false;\n    }\n\n    static get LIST_INVALID() {\n        return \"INVALID\";\n    }\n\n    static get LIST_ALL() {\n        return \"ALL\";\n    }\n\n    /**\n     * Compute a 1-based index into a list, based on a Scratch argument.\n     * Two special cases may be returned:\n     * LIST_ALL: if the block is referring to all of the items in the list.\n     * LIST_INVALID: if the index was invalid in any way.\n     * @param {*} index Scratch arg, including 1-based numbers or special cases.\n     * @param {number} length Length of the list.\n     * @param {boolean} acceptAll Whether it should accept \"all\" or not.\n     * @return {(number|string)} 1-based index for list, LIST_ALL, or LIST_INVALID.\n     */\n    static toListIndex(index, length, acceptAll) {\n        if (typeof index !== \"number\") {\n            if (index === \"all\") {\n                return acceptAll ? Cast.LIST_ALL : Cast.LIST_INVALID;\n            }\n            if (index === \"last\") {\n                if (length > 0) {\n                    return length;\n                }\n                return Cast.LIST_INVALID;\n            } else if (index === \"random\" || index === \"any\") {\n                if (length > 0) {\n                    return 1 + Math.floor(Math.random() * length);\n                }\n                return Cast.LIST_INVALID;\n            }\n        }\n        index = Math.floor(Cast.toNumber(index));\n        if (index < 1 || index > length) {\n            return Cast.LIST_INVALID;\n        }\n        return index;\n    }\n}\n\nmodule.exports = Cast;\n","import { ArgumentType } from \"./types/enums\";\nimport { RGBObject, TypeByArgumentType, ValueOf } from \"./types\";\nimport Cast from '$scratch-vm/util/cast';\n\nexport const castToType = (argumentType: ValueOf<typeof ArgumentType>, value: any) => {\n  switch (argumentType) {\n    case ArgumentType.String:\n      return `${value}`;\n    case ArgumentType.Number:\n      return parseFloat(value);\n    case ArgumentType.Boolean:\n      return JSON.parse(value ?? false);\n    case ArgumentType.Note:\n      return parseInt(value);\n    case ArgumentType.Angle:\n      return parseInt(value);\n    case ArgumentType.Matrix:\n      return toMatrix(value);\n    case ArgumentType.Color:\n      return Cast.toRgbColorObject(value) as RGBObject;\n    default:\n      throw new Error(`Method not implemented for value of ${value} and type ${argumentType}`);\n  }\n}\n\nexport const tryCastToArgumentType = <T extends ValueOf<typeof ArgumentType>>(\n  argumentType: T,\n  value: any,\n  onFailure: (value: any) => TypeByArgumentType<T>\n): TypeByArgumentType<T> => {\n  try {\n    const casted = castToType(argumentType, value);\n    return casted as TypeByArgumentType<T>;\n  }\n  catch {\n    return onFailure(value);\n  }\n}\n\nconst toFlag = (value: string): boolean => parseInt(value) === 1;\n\nconst toMatrix = (matrixString: string): boolean[][] => {\n  if (matrixString.length !== 25) return new Array(5).fill(new Array(5).fill(false));\n\n  const entries = matrixString.split('');\n  const matrix = entries.map(toFlag).reduce((matrix, flag, index) => {\n    const row = Math.floor(index / 5);\n    const column = index % 5;\n    (column === 0) ? matrix[row] = [flag] : matrix[row].push(flag);\n    return matrix;\n  }, new Array<boolean[]>(5));\n\n  return matrix;\n}","export type ArgumentEntry<T> = { text: string, value: T };\nexport type ArgumentEntrySetter<T> = (entry: ArgumentEntry<T>) => void;\n\nexport default class CustomArgumentManager {\n  map: Map<string, ArgumentEntry<any>> = new Map();\n  pending: { id: string, entry: ArgumentEntry<any> } = null;\n\n  clearPending() { this.pending = null }\n  setPending(update: typeof this.pending) { this.pending = update }\n\n  add<T>(entry: ArgumentEntry<T>): string {\n    const id = CustomArgumentManager.GetIdentifier();\n    this.map.set(id, entry);\n    this.clearPending();\n    return id;\n  }\n\n  insert<T>(id: string, entry: ArgumentEntry<T>): string {\n    this.map.set(id, entry);\n    this.clearPending();\n    return id;\n  }\n\n  request<T>(): [string, ArgumentEntrySetter<T>] {\n    this.clearPending();\n    const id = CustomArgumentManager.GetIdentifier();\n    return [id, (entry) => this.setPending({ id, entry })];\n  }\n\n  tryResolve() {\n    if (!this.pending) return;\n    const { pending: { entry, id } } = this;\n    this.map.set(id, entry);\n    this.clearPending();\n    return { entry, id };\n  }\n\n  getCurrentEntries() {\n    return Array.from(this.map.entries())\n      .filter(([_, entry]) => entry !== null)\n      .map(([id, { text }]) => [text, id] as const);\n  }\n\n  getEntry(id: string) { return this.map.get(id) }\n\n  static SaveKey = \"internal_customArgumentsSaveData\" as const;\n\n  requiresSave() { this.map.size > 0 }\n\n  saveTo(obj: object) {\n    const entries = Array.from(this.map.entries())\n      .filter(([_, entry]) => entry !== null)\n      .map(([id, entry]) => ({ id, entry }));\n    if (entries.length === 0) return;\n    obj[CustomArgumentManager.SaveKey] = entries;\n  }\n\n  loadFrom(obj: Record<typeof CustomArgumentManager[\"SaveKey\"], { id: string, entry: ArgumentEntry<any> }[]>) {\n    obj[CustomArgumentManager.SaveKey]?.forEach(({ id, entry }) => {\n      this.map.set(id, entry);\n    });\n  }\n\n  /**\n   * @todo Implement this if it becomes necessary (i.e the every growing size of this.map becomes an issue)\n   */\n  private purgeStaleIDs() {\n    // Somehow, tap into blockly to loop through all current blocks & their field dropdowns.\n    // Collect all field dropdowns values. \n    // Then, loop over entries in this.map -- if the values don't appear in the collected in-use values, drop those items.\n    // NOTE: The blocks in the 'pallette' do not show up in a target's \"blocks\" object, which makes this tricky.\n  }\n\n  static IsIdentifier = (query: string) => query.startsWith(CustomArgumentManager.IdentifierPrefix);\n  private static GetIdentifier = () => CustomArgumentManager.IdentifierPrefix + new Date().getTime().toString();\n  private static IdentifierPrefix = \"__customArg__\";\n}","import { ExtensionInstance } from \"$common/extension\";\nimport { untilObject } from \"$common/utils\";\nimport { ArgumentEntry, ArgumentEntrySetter } from \"./CustomArgumentManager\";\n\n/** Constructed based on Svelte documentation: https://svelte.dev/docs#run-time-client-side-component-api-creating-a-component */\ntype CreateComponentOptions = {\n  target: Element | HTMLElement;\n  anchor?: Element | HTMLElement;\n  props: {};\n}\n\nexport type CustomArgumentUIConstructor = (options: CreateComponentOptions) => void;\n\nexport const renderToDropdown = async <T>(\n  compononentConstructor: CustomArgumentUIConstructor,\n  props: {\n    extension: ExtensionInstance,\n    setter: ArgumentEntrySetter<T>,\n    current: ArgumentEntry<T>\n  }\n) => {\n  const dropdownContainerClass = \"blocklyDropDownContent\";\n  const elements = document.getElementsByClassName(dropdownContainerClass);\n  if (elements.length !== 1) return console.error(`Uh oh! Expected 1 element with class '${dropdownContainerClass}', but found ${elements.length}`);\n  const [target] = elements;\n  const anchor = await untilObject(() => target.children[0]);\n  const component = new compononentConstructor({ target, anchor, props });\n  centerDropdownButton(anchor);\n}\n\nconst centerDropdownButton = (container: Element) => {\n  type ClassAndStyleModification = [string, (syle: CSSStyleDeclaration) => void];\n\n  const findElementAndModifyStyle = ([className, styleMod]: ClassAndStyleModification) => {\n    const elements = container.getElementsByClassName(className);\n    console.assert(elements.length === 1, `Incorrect number of elements found with class: ${className}`);\n    styleMod((elements[0] as HTMLElement).style);\n  };\n\n  const elements = [\n    [\n      \"goog-menuitem goog-option\",\n      (style) => {\n        style.margin = \"auto\";\n        style.paddingLeft = style.paddingRight = \"0px\";\n      }\n    ],\n    [\n      \"goog-menuitem-content\",\n      (style) => style.textAlign = \"center\"\n    ]\n  ] satisfies ClassAndStyleModification[];\n\n  elements.forEach(findElementAndModifyStyle);\n}","/**\n * Class adapted from: https://github.com/LLK/scratch-svg-renderer/blob/develop/src/bitmap-adapter.js\n */\nexport default class {\n  private makeImage() { return new Image() }\n  private makeCanvas() { return document.createElement('canvas') }\n\n  /**\n   * Return a canvas with the resized version of the given image, done using nearest-neighbor interpolation\n   * @param {CanvasImageSource} image The image to resize\n   * @param {int} newWidth The desired post-resize width of the image\n   * @param {int} newHeight The desired post-resize height of the image\n   * @returns {HTMLCanvasElement} A canvas with the resized image drawn on it.\n   */\n  resize(image, newWidth, newHeight) {\n    // We want to always resize using nearest-neighbor interpolation. However, canvas implementations are free to\n    // use linear interpolation (or other \"smooth\" interpolation methods) when downscaling:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1360415\n    // It seems we can get around this by resizing in two steps: first width, then height. This will always result\n    // in nearest-neighbor interpolation, even when downscaling.\n    const stretchWidthCanvas = this.makeCanvas();\n    stretchWidthCanvas.width = newWidth;\n    stretchWidthCanvas.height = image.height;\n    let context = stretchWidthCanvas.getContext('2d');\n    context.imageSmoothingEnabled = false;\n    context.drawImage(image, 0, 0, stretchWidthCanvas.width, stretchWidthCanvas.height);\n    const stretchHeightCanvas = this.makeCanvas();\n    stretchHeightCanvas.width = newWidth;\n    stretchHeightCanvas.height = newHeight;\n    context = stretchHeightCanvas.getContext('2d');\n    context.imageSmoothingEnabled = false;\n    context.drawImage(stretchWidthCanvas, 0, 0, stretchHeightCanvas.width, stretchHeightCanvas.height);\n    return stretchHeightCanvas;\n  }\n\n  /**\n   * Scratch 2.0 had resolution 1 and 2 bitmaps. All bitmaps in Scratch 3.0 are equivalent\n   * to resolution 2 bitmaps. Therefore, converting a resolution 1 bitmap means doubling\n   * it in width and height.\n   * @param {!string} dataURI Base 64 encoded image data of the bitmap\n   * @param {!function} callback Node-style callback that returns updated dataURI if conversion succeeded\n   */\n  convertResolution1Bitmap(dataURI, callback) {\n    const image = new Image();\n    image.src = dataURI;\n    image.onload = () => {\n      callback(null, this.resize(image, image.width * 2, image.height * 2).toDataURL());\n    };\n    image.onerror = () => {\n      callback('Image load failed');\n    };\n  }\n\n  /**\n   * Given width/height of an uploaded item, return width/height the image will be resized\n   * to in Scratch 3.0\n   * @param {!number} oldWidth original width\n   * @param {!number} oldHeight original height\n   * @return {object} Array of new width, new height\n   */\n  getResizedWidthHeight(oldWidth, oldHeight) {\n    const STAGE_WIDTH = 480;\n    const STAGE_HEIGHT = 360;\n    const STAGE_RATIO = STAGE_WIDTH / STAGE_HEIGHT;\n\n    // If both dimensions are smaller than or equal to corresponding stage dimension,\n    // double both dimensions\n    if ((oldWidth <= STAGE_WIDTH) && (oldHeight <= STAGE_HEIGHT)) {\n      return { width: oldWidth * 2, height: oldHeight * 2 };\n    }\n\n    // If neither dimension is larger than 2x corresponding stage dimension,\n    // this is an in-between image, return it as is\n    if ((oldWidth <= STAGE_WIDTH * 2) && (oldHeight <= STAGE_HEIGHT * 2)) {\n      return { width: oldWidth, height: oldHeight };\n    }\n\n    const imageRatio = oldWidth / oldHeight;\n    // Otherwise, figure out how to resize\n    if (imageRatio >= STAGE_RATIO) {\n      // Wide Image\n      return { width: STAGE_WIDTH * 2, height: STAGE_WIDTH * 2 / imageRatio };\n    }\n    // In this case we have either:\n    // - A wide image, but not with as big a ratio between width and height,\n    // making it so that fitting the width to double stage size would leave\n    // the height too big to fit in double the stage height\n    // - A square image that's still larger than the double at least\n    // one of the stage dimensions, so pick the smaller of the two dimensions (to fit)\n    // - A tall image\n    // In any of these cases, resize the image to fit the height to double the stage height\n    return { width: STAGE_HEIGHT * 2 * imageRatio, height: STAGE_HEIGHT * 2 };\n  }\n\n  /**\n   * Given bitmap data, resize as necessary.\n   * @param {string} fileData Base 64 encoded image data of the bitmap\n   * @param {string} fileType The MIME type of this file\n   * @returns {Promise} Resolves to resized image data Uint8Array\n   */\n  importBitmap(dataURI: string): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n      const image = this.makeImage();\n      image.src = dataURI;\n      image.onload = () => {\n        const newSize = this.getResizedWidthHeight(image.width, image.height);\n        if (newSize.width === image.width && newSize.height === image.height) {\n          // No change\n          resolve(this.convertDataURIToBinary(dataURI));\n        } else {\n          const resizedDataURI = this.resize(image, newSize.width, newSize.height).toDataURL();\n          resolve(this.convertDataURIToBinary(resizedDataURI));\n        }\n      };\n      image.onerror = () => {\n        reject('Image load failed');\n      };\n    });\n  }\n\n  // TODO consolidate with scratch-vm/src/util/base64-util.js\n  // From https://gist.github.com/borismus/1032746\n  convertDataURIToBinary(dataURI) {\n    const BASE64_MARKER = ';base64,';\n    const base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n    const base64 = dataURI.substring(base64Index);\n    const raw = window.atob(base64);\n    const rawLength = raw.length;\n    const array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (let i = 0; i < rawLength; i++) {\n      array[i] = raw.charCodeAt(i);\n    }\n    return array;\n  }\n}","import type RenderedTarget from \"$scratch-vm/sprites/rendered-target\";\nimport Target from \"$scratch-vm/engine/target\";\nimport { MinimalExtensionConstructor } from \"../../required\";\nimport MockBitmapAdapter from \"./MockBitmapAdapter\";\nimport { getUrlHelper } from \"./utils\";\n\nlet bitmapAdapter: MockBitmapAdapter;\nlet urlHelper: ReturnType<typeof getUrlHelper>;\n\nconst rendererKey: keyof RenderedTarget = \"renderer\";\nconst isRenderedTarget = (target: Target | RenderedTarget): target is RenderedTarget => rendererKey in target;\n\n/**\n * Mixin the ability for extensions to add costumes to sprites\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithCustomSupport extends Ctor {\n\n    /**\n     * Add a costume to the current sprite based on same image data\n     * @param {RenderedTarget} target (e.g. `util.target`)\n     * @param {ImageData} image What image to use to create the costume\n     * @param {\"add only\" | \"add and set\"} action What action should be applied\n     * - **_add only_**: generates the costume and append it it to the sprite's costume library\n     * - **_add and set_**: Both generate the costume (adding it to the sprite's costume library) and set it as the sprite's current costume\n     * @param {string?} name optional name to attach to the costume\n     */\n    async addCostume(target: Target, image: ImageData, action: \"add only\" | \"add and set\", name?: string) {\n      if (!isRenderedTarget(target)) return console.warn(\"Costume could not be added is the supplied target wasn't a rendered target\");\n\n      name ??= `${this.id}_generated_${Date.now()}`;\n      bitmapAdapter ??= new MockBitmapAdapter();\n      urlHelper ??= getUrlHelper(image);\n\n      // storage is of type: https://github.com/LLK/scratch-storage/blob/develop/src/ScratchStorage.js\n      const { storage } = this.runtime;\n      const dataFormat = storage.DataFormat.PNG;\n      const assetType = storage.AssetType.ImageBitmap;\n      const dataBuffer = await bitmapAdapter.importBitmap(urlHelper.getDataURL(image));\n\n      const asset = storage.createAsset(assetType, dataFormat, dataBuffer, null, true);\n      const { assetId } = asset;\n      const costume = { name, dataFormat, asset, md5: `${assetId}.${dataFormat}`, assetId };\n\n      await this.runtime.addCostume(costume);\n\n      const { length } = target.getCostumes();\n\n      target.addCostume(costume, length);\n      if (action === \"add and set\") target.setCostume(length);\n    }\n\n  }\n\n  return ExtensionWithCustomSupport;\n}\n","import { ValueOf } from \"$common/types\";\nimport { Mixin, MixinName, optionalMixins } from \"./index\";\nimport { MinimalExtensionConstructor } from \"./required\";\n\ntype DependentFunctionality<TBase, TMixinDependencies extends Mixin<unknown>[]> =\n  TMixinDependencies extends [infer Head extends Mixin<unknown>, ...infer Tail extends Mixin<unknown>[]]\n  ? DependentFunctionality<ReturnType<Head> & TBase, Tail>\n  : TBase;\n\nconst dependencyListeners: ((mixins: Mixin<any>[]) => void)[] = []\n\nexport const withDependencies = <\n  Base extends MinimalExtensionConstructor,\n  TMixinDependencies extends Mixin<T>[],\n  T\n>(Ctor: Base, ...dependencies: TMixinDependencies) => {\n  dependencyListeners.pop()?.(dependencies);\n  return Ctor as Base & DependentFunctionality<Base, TMixinDependencies>;\n}\n\nlet mixinsMap: Map<ValueOf<typeof optionalMixins>, keyof typeof optionalMixins>;\n\nexport const tryCaptureDependencies = <TReturn>(createMixin: () => TReturn): { MixedIn: TReturn, dependencies: MixinName[] | null } => {\n\n  mixinsMap ??= Object.entries(optionalMixins).reduce((map, [name, mixin]) => {\n    return map.set(mixin, name as MixinName);\n  }, new Map());\n\n  let dependencies: MixinName[];\n\n  dependencyListeners.push((mixins) => {\n    mixins\n      .map(dependency => dependency as ValueOf<typeof optionalMixins>)\n      .forEach(dependency => {\n        if (!mixinsMap.has(dependency)) throw new Error(\"Unkown mixin dependency! \" + dependency);\n        dependencies ??= [];\n        dependencies.push(mixinsMap.get(dependency));\n      })\n  });\n\n  const MixedIn = createMixin();\n\n  return { dependencies, MixedIn };\n}","import type Runtime from \"$scratch-vm/engine/runtime\";\nimport CustomArgumentManager, { ArgumentEntry } from \"$common/extension/mixins/optional/customArguments/CustomArgumentManager\";\nimport { CustomArgumentUIConstructor, renderToDropdown } from \"$common/extension/mixins/optional/customArguments/dropdownOverride\";\nimport { ArgumentType } from \"$common/types/enums\";\nimport { openDropdownState, closeDropdownState, initDropdownState, customArgumentFlag, customArgumentCheck, dropdownStateFlag, dropdownEntryFlag } from \"$common/globals\";\nimport { Argument, BaseGenericExtension } from \"$common/types\";\nimport { MinimalExtensionConstructor } from \"../../required\";\nimport { withDependencies } from \"../../dependencies\";\nimport customSaveData from \"../customSaveData\";\n\ntype ComponentGetter = (id: string, componentName: string) => CustomArgumentUIConstructor;\n\nconst callingContext = {\n  DrowpdownOpen: openDropdownState,\n  DropdownClose: closeDropdownState,\n  Init: initDropdownState,\n} as const;\n\n/**\n * Mixin the ability for extensions to create custom argument types with their own specific UIs\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function mixin<T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithCustomArgumentSupport extends withDependencies(Ctor, customSaveData) {\n    /**\n     * Create a custom argument for one of this block's arguments\n     * @param param0 \n     * - component: The svelte component to render the custom argument UI\n     * - initial: The starting value of the the custom argument (including both its value and text representation)\n     * - acceptReportersHandler: A function that must be defined if you'd like for your custom argument to accept reporters\n     * @returns \n     */\n    protected makeCustomArgument = <T>({ component, initial, acceptReportersHandler: handler }: { component: string, initial: ArgumentEntry<T>, acceptReportersHandler?: (x: any) => ArgumentEntry<T> }): Argument<T> => {\n      this.argumentManager ??= new CustomArgumentManager();\n      const id = this.argumentManager.add(initial);\n      const getItems = () => [{ text: customArgumentFlag, value: JSON.stringify({ component, id }) }];\n      return {\n        type: ArgumentType.Custom,\n        defaultValue: id,\n        options: handler === undefined ? getItems : { acceptsReports: true, getItems, handler },\n      } as Argument<T>\n    }\n\n    protected argumentManager: CustomArgumentManager = null;\n\n    public get customArgumentManager(): CustomArgumentManager {\n      return this.argumentManager\n    }\n\n    public getOrCreateCustomArgumentManager(): CustomArgumentManager {\n      this.argumentManager ??= new CustomArgumentManager();\n      return this.argumentManager;\n    }\n\n    /**\n     * Utilized externally by scratch-vm to check if a given argument should be treated as a 'custom argument'.\n     * Checks if the value returned by a dyanmic menu indicates that it should be treated as a 'custom argument'\n     */\n    private [customArgumentCheck](arr: Array<string | { text: string }>) {\n      if (arr.length !== 1) return false;\n      const item = arr[0];\n      if (typeof item !== \"object\") return false;\n      const { text } = item;\n      return text === customArgumentFlag;\n    };\n\n    /**\n     * Utilized externally by scratch-vm to process custom arguments\n     * @param runtime NOTE: once we switch to V2, we can remove this and instead use the extension's runtime\n     * @param param1 \n     * @param getComponent \n     * @returns \n     */\n    private processCustomArgumentHack(runtime: Runtime, [{ value }]: { value: string }[], getComponent: ComponentGetter): (readonly [string, string])[] {\n\n      const { id: extensionID, customArgumentManager: argumentManager } = this;\n      const { component, id: initialID } = JSON.parse(value) as { component: string, id: string };\n      const context = runtime[dropdownStateFlag];\n\n      switch (context) {\n        case callingContext.Init:\n          return argumentManager.getCurrentEntries();\n        case callingContext.DropdownClose: {\n          const result = argumentManager.tryResolve();\n          return result ? [[result.entry.text, result.id]] : argumentManager.getCurrentEntries();\n        }\n        case callingContext.DrowpdownOpen: {\n          const currentEntry = runtime[dropdownEntryFlag] as ArgumentEntry<any>;\n          const prevID = currentEntry?.value ?? initialID;\n          const current = argumentManager.getEntry(prevID);\n          const [id, setEntry] = argumentManager.request();\n          renderToDropdown(getComponent(extensionID, component), { setter: setEntry, current, extension: this as any as BaseGenericExtension });\n          return [[\"Apply\", id]];\n        }\n      }\n\n      throw new Error(\"Error during processing -- Context:\" + callingContext);\n    };\n\n  }\n  return ExtensionWithCustomArgumentSupport;\n}","import { MenuThatAcceptsReporters, DynamicMenuThatAcceptsReporters, Menu, MenuItem, DynamicMenu, ExtensionMenuMetadata, ExtensionArgumentMetadata } from \"$common/types\";\nimport { isFunction, isPrimitive } from \"$common/utils\";\n\nconst reporterItemsKey: keyof MenuThatAcceptsReporters<any> = \"items\";\nconst reporterItemsGetterKey: keyof DynamicMenuThatAcceptsReporters<any> = \"getItems\";\n\nexport const menuProbe = {\n  isSimpleStatic: (menu: Menu<any>): menu is any[] | MenuItem<any>[] => Array.isArray(menu),\n  isSimpleDynamic: (menu: Menu<any>): menu is DynamicMenu<any> => isFunction(menu),\n  isStaticWithReporters: (menu: Menu<any>): menu is MenuThatAcceptsReporters<any> => reporterItemsKey in menu,\n  isDynamicWithReporters: (menu: Menu<any>): menu is DynamicMenuThatAcceptsReporters<any> => reporterItemsGetterKey in menu,\n}\n\nexport const getMenuName = (index: number) => `${index}`;\n\nexport const convertMenuItemsToString = (item: any | MenuItem<any>) =>\n  isPrimitive(item) ? `${item}` : { ...item, value: `${item.value}` };\n\nexport const asStaticMenu = (items: MenuItem<any>[], acceptReporters: boolean) => ({\n  acceptReporters,\n  items: items\n    .map(item => item /**TODO figure out how to format */)\n    .map(convertMenuItemsToString)\n} satisfies ExtensionMenuMetadata);\n\nexport const addOptionsAndGetMenuName = (options: Menu<any>, menus: Menu<any>[],) => {\n  const alreadyAddedIndex = menus.indexOf(options);\n  const menuIndex = alreadyAddedIndex >= 0 ? alreadyAddedIndex : menus.push(options) - 1;\n  return `${getMenuName(menuIndex)}`;\n}\n\nexport const setMenu = (entry: ExtensionArgumentMetadata, options: Menu<any>, menus: Menu<any>[]) =>\n  options ? entry.menu = addOptionsAndGetMenuName(options, menus) : null;","import { BlockMetadata, BlockOperation } from \"$common/types\";\nimport { isFunction } from \"$common/utils\";\n\nexport const format = (text: string, identifier: string, description: string): string => {\n  return text; // make use of formatMessage in the future\n}\n\nexport type BlockGetter<This, Fn extends BlockOperation> = (this: This, self: This) => BlockMetadata<Fn>;\nexport type BlockDefinition<T, Fn extends BlockOperation> = BlockMetadata<Fn> | BlockGetter<T, Fn>;\n\nexport const isBlockGetter = <T, Fn extends BlockOperation>(details: BlockDefinition<any, Fn>): details is BlockGetter<T, Fn> => isFunction(details);\n\nexport const getButtonID = (id: string, opcode: string) => `${id}_${opcode}`;\n\nexport const extractArgNamesFromText = (text: string): string[] => {\n  const textAndNumbersInBrackets = /\\[([A-Za-z0-9]+)\\]/gm;\n  const argNames: string[] = [];\n  for (const [_, result] of text.matchAll(textAndNumbersInBrackets)) {\n    argNames.push(result);\n  }\n  return argNames;\n}","import { Argument, ArgumentType, DynamicMenuThatAcceptsReporters, Menu, MenuThatAcceptsReporters, VerboseArgument } from \"$common/types\";\nimport { isPrimitive, identity } from \"$common/utils\";\n\nexport type Handler = (MenuThatAcceptsReporters<any>['handler']);\nconst isVerbose = (arg: Argument<any>): arg is VerboseArgument<any> => !isPrimitive(arg);\nconst handlerKey: keyof MenuThatAcceptsReporters<any> = 'handler';\nconst hasHandler = (options: Menu<any>): options is MenuThatAcceptsReporters<any> | DynamicMenuThatAcceptsReporters<any> => options && handlerKey in options;\n\nexport const extractHandlers = (args: readonly Argument<any>[]): Handler[] => args.map(element => {\n  if (!isVerbose(element)) return identity;\n  if (element.type === ArgumentType.Image) return identity;\n  const { options } = element;\n  if (!hasHandler(options)) return identity;\n  return options.handler;\n});","import { Argument, ArgumentType, BlockMetadata, BlockOperation, ExtensionArgumentMetadata, InlineImage, Menu, MultipleArgsBlock, OneArgBlock, ValidKey, ValueOf, VerboseArgument } from \"$common/types\";\nimport { assertSameLength, isPrimitive, isString } from \"$common/utils\";\nimport { extractHandlers } from \"./handlers\";\nimport { setMenu } from \"./menus\";\nimport { format } from \"./util\";\n\nexport const getArgName = (index: number) => `${index}`;\n\nconst getArgumentType = <T>(arg: Argument<T>): ValueOf<typeof ArgumentType> =>\n  isPrimitive(arg) ? arg as ValueOf<typeof ArgumentType> : (arg as VerboseArgument<T>).type;\n\n/**\n * Extract an array of args tied to a block \n * @param block \n * @returns An array of 0, 1, or 2+ args\n */\nexport const extractArgs = (block: BlockMetadata<BlockOperation>) => {\n  const argKey: ValidKey<OneArgBlock> = \"arg\";\n  const argsKey: ValidKey<MultipleArgsBlock> = \"args\";\n  if (argKey in block && block[argKey]) return [(block as OneArgBlock).arg];\n  if (argsKey in block && (block[argsKey]?.length ?? 0) > 0) return (block as MultipleArgsBlock).args;\n  return [];\n}\n\n/**\n * Combine arguments' type, name, and handler information into a single structure\n * @param args \n * @param names \n * @returns \n */\nexport const zipArgs = (args: readonly Argument<any>[], names?: string[]) => {\n  const types = args.map(getArgumentType);\n  const handlers = extractHandlers(args);\n  names ??= types.map((_, index) => getArgName(index));\n  assertSameLength(types, handlers, names);\n  return types.map((type, index) => ({ type, name: names[index], handler: handlers[index] }));\n}\n\nexport const convertToArgumentInfo = (opcode: string, args: readonly Argument<any>[], menus: Menu<any>[]) => {\n  if (!args || args.length === 0) return undefined;\n\n  return Object.fromEntries(\n    args\n      .map((element, index) => {\n        if (isInlineImage(element)) return { ...element, dataURI: element.uri };\n\n        const entry = {} as ExtensionArgumentMetadata;\n        entry.type = getArgumentType(element);\n\n        if (isPrimitive(element)) return entry;\n\n        const { defaultValue, options } = element as VerboseArgument<any>;\n\n        setDefaultValue(entry, opcode, index, defaultValue);\n        setMenu(entry, options, menus);\n\n        return entry;\n      })\n      .reduce(\n        (accumulation, entry, index) => accumulation.set(getArgName(index), entry),\n        new Map<string, ExtensionArgumentMetadata>\n      )\n  );\n}\n\nconst getArgTranslationID = (blockname: string, index: number) => `${blockname}-arg${index}-default`;\n\nconst getDefaultValue = (defaultValue: any, opcode: string, index: number) => isString(defaultValue)\n  ? format(defaultValue, getArgTranslationID(opcode, index), `Default value for arg ${index + 1} of ${opcode} block`)\n  : defaultValue;\n\nconst setDefaultValue = (entry: ExtensionArgumentMetadata, opcode: string, index: number, defaultValue: any,) => {\n  if (defaultValue === undefined) return;\n  entry.defaultValue = getDefaultValue(defaultValue, opcode, index)\n}\n\nconst isInlineImage = (arg: Argument<any>): arg is InlineImage => !isString(arg) && arg.type === ArgumentType.Image;","import { AnyBlock, OneArgBlock, MultipleArgsBlock, Argument } from \"$common/types\";\nimport { isString } from \"$common/utils\";\nimport { getArgName } from \"./args\";\nimport { format } from \"./util\";\n\nconst isDynamicText = (text: AnyBlock[\"text\"]): text is (OneArgBlock[\"text\"] | MultipleArgsBlock[\"text\"]) => !isString(text);\n\nexport const convertToDisplayText = (opcode: string, text: AnyBlock[\"text\"], args: readonly Argument<any>[]) => {\n  if (!args || args.length === 0) return text as string;\n\n  if (!isDynamicText(text)) return format(text, opcode, `Block text for '${opcode}'`);\n\n  const textFunc: (...args: any[]) => string = text;\n  const argPlaceholders = args.map((_, index) => `[${getArgName(index)}]`);\n  return format(textFunc(...argPlaceholders), opcode, `Block text for '${opcode}'`);\n}","import { castToType } from \"$common/cast\";\nimport CustomArgumentManager from \"$common/extension/mixins/optional/customArguments/CustomArgumentManager\";\nimport { ArgumentType, BlockType } from \"$common/types/enums\";\nimport { BlockOperation, ValueOf, Menu, ExtensionMetadata, ExtensionBlockMetadata, ExtensionMenuMetadata, DynamicMenu, BlockMetadata, } from \"$common/types\";\nimport { registerButtonCallback } from \"$common/ui\";\nimport { isString, typesafeCall, } from \"$common/utils\";\nimport type BlockUtility from \"$root/packages/scratch-vm/src/engine/block-utility\";\nimport { menuProbe, asStaticMenu, getMenuName, convertMenuItemsToString } from \"./menus\";\nimport { Handler } from \"./handlers\";\nimport { BlockDefinition, getButtonID, isBlockGetter } from \"./util\";\nimport { convertToArgumentInfo, extractArgs, zipArgs } from \"./args\";\nimport { convertToDisplayText } from \"./text\";\nimport { CustomizableExtensionConstructor, MinimalExtensionInstance, } from \"..\";\nimport { ExtensionIntanceWithFunctionality } from \"../..\";\n\nexport const getImplementationName = (opcode: string) => `internal_${opcode}`;\n\nconst inlineImageAccessError = \"ERROR: This argument represents an inline image and should not be accessed.\";\n\n/**\n * Wraps a blocks operation so that the arguments passed from Scratch are first extracted and then passed as indices in a parameter array.\n * @param _this What will be bound to the 'this' context of the underlying operation\n * @param operation The operation (function) to wrap\n * @param args The args that must be parsed before being passed to the underlying operation \n * @returns \n */\nexport const wrapOperation = <T extends MinimalExtensionInstance>(\n  _this: T,\n  operation: BlockOperation,\n  args: { name: string, type: ValueOf<typeof ArgumentType>, handler: Handler }[]\n) => _this.supports(\"customArguments\")\n    ? function (this: ExtensionIntanceWithFunctionality<[\"customArguments\"]>, argsFromScratch: Record<string, any>, blockUtility: BlockUtility) {\n      const castedArguments = args.map(({ name, type, handler }) => {\n        if (type === ArgumentType.Image) return inlineImageAccessError;\n        const param = argsFromScratch[name];\n        switch (type) {\n          case ArgumentType.Custom:\n            const isIdentifier = isString(param) && CustomArgumentManager.IsIdentifier(param);\n            const value = isIdentifier ? this.customArgumentManager.getEntry(param).value : param;\n            return handler.call(_this, value);\n          default:\n            return castToType(type, handler.call(_this, param));\n        }\n      });\n      return operation.call(_this, ...castedArguments, blockUtility);\n    }\n    : function (this: T, argsFromScratch: Record<string, any>, blockUtility: BlockUtility) {\n      const castedArguments = args.map(({ name, type, handler }) =>\n        type === ArgumentType.Image\n          ? inlineImageAccessError\n          : castToType(type, handler.call(_this, argsFromScratch[name]))\n      );\n      return operation.call(_this, ...castedArguments, blockUtility);\n    }\n\n/**\n * Mixin the ability for extension's to:\n * - build up block definitions incrementally (through the use of `pushBlock`)\n * - implement a valid `getInfo` method that interacts with the scratch-vm correctly  \n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function (Ctor: CustomizableExtensionConstructor) {\n  type BlockEntry = { definition: BlockDefinition<ScratchExtension, BlockOperation>, operation: BlockOperation };\n  type BlockMap = Map<string, BlockEntry>;\n  abstract class ScratchExtension extends Ctor {\n    private readonly blockMap: BlockMap = new Map();\n\n    private readonly menus: Menu<any>[] = [];\n    private info: ExtensionMetadata;\n\n    /**\n     * Add a block \n     * @param opcode \n     * @param definition \n     * @param operation \n     */\n    pushBlock<Fn extends BlockOperation>(opcode: string, definition: BlockDefinition<any, Fn>, operation: BlockOperation) {\n      if (this.blockMap.has(opcode)) throw new Error(`Attempt to push block with opcode ${opcode}, but it was already set. This is assumed to be a mistake.`)\n      this.blockMap.set(opcode, { definition, operation });\n    }\n\n    protected getInfo(): ExtensionMetadata {\n      if (!this.info) {\n        const { id, name, blockIconURI } = this;\n        const blocks = Array.from(this.blockMap.entries()).map(entry => this.convertToInfo(entry));\n        this.info = { id, blocks, name, blockIconURI, menus: this.collectMenus() };\n      }\n      return this.info;\n    }\n\n    private convertToInfo(details: [opcode: string, entry: BlockEntry]) {\n      const [opcode, entry] = details;\n      const { definition, operation } = entry;\n\n      // Utilize explicit casting to appease test framework's typechecker\n      const block = isBlockGetter(definition)\n        ? typesafeCall(definition, this, this) as BlockMetadata<BlockOperation>\n        : definition as BlockMetadata<BlockOperation>;\n\n      const { type, text } = block;\n\n      const args = extractArgs(block);\n\n      const { id, runtime, menus } = this;\n\n      const displayText = convertToDisplayText(opcode, text, args);\n      const argumentsInfo = convertToArgumentInfo(opcode, args, menus);\n\n      const info: ExtensionBlockMetadata = { opcode, text: displayText, blockType: type, arguments: argumentsInfo };\n\n      if (type === BlockType.Button) {\n        const buttonID = getButtonID(id, opcode);\n        registerButtonCallback(runtime, buttonID, operation.bind(this));\n        info.func = buttonID;\n      } else {\n        const implementationName = getImplementationName(opcode);\n        this[implementationName] = wrapOperation(this as MinimalExtensionInstance, operation, zipArgs(args));\n      }\n\n      return info;\n    }\n\n    private collectMenus() {\n      const { isSimpleStatic, isSimpleDynamic, isStaticWithReporters, isDynamicWithReporters } = menuProbe;\n      return Object.fromEntries(\n        this.menus\n          .map((menu, index) => {\n            if (isSimpleStatic(menu)) return asStaticMenu(menu, false);\n            if (isSimpleDynamic(menu)) return this.registerDynamicMenu(menu, false, index);\n            if (isStaticWithReporters(menu)) return asStaticMenu(menu.items, true);\n            if (isDynamicWithReporters(menu)) return this.registerDynamicMenu(menu.getItems, true, index);\n            throw new Error(\"Unable to process menu\");\n          })\n          .reduce((map, menu, index) => map.set(getMenuName(index), menu), new Map<string, ExtensionMenuMetadata>())\n      );\n    }\n\n    private registerDynamicMenu(getItems: DynamicMenu<any>, acceptReporters: boolean, menuIndex: number) {\n      const key = `internal_dynamic_${menuIndex}`; // legacy support?\n      this[key] = () => getItems.call(this).map(item => item).map(convertMenuItemsToString);\n      return { acceptReporters, items: key } satisfies ExtensionMenuMetadata\n    }\n  }\n\n  return ScratchExtension;\n}","import type BlockUtility from \"$scratch-vm/engine/block-utility\";\nimport { TypedMethodDecorator } from \".\";\nimport { BlockType } from \"$common/types/enums\";\nimport { BlockMetadata } from \"$common/types\";\nimport { getImplementationName } from \"../mixins/required/scratchInfo/index\";\nimport { ExtensionInstance } from \"..\";\n\n/**\n * This a decorator function that should be associated with methods of your Extension class, all in order to turn your class methods\n * into Blocks that can be executed in the Block Programming Environment.\n * @param {BlockMetadata} blockInfoOrGetter Either an object or a function that returns an object of the following specified shapes \n * (which shape is required depends on your method's argument(s)):\n * @example \n * Block method accepts no arguments\n * ```ts\n * {\n *  type: BlockType, // e.g. \"reporter\", \"command\"\n *  text: string // the display text of your block\n * }\n * ```\n * @example \n * Block method accepts one argument\n * ```ts\n * {\n *  type: BlockType, // e.g. \"reporter\", \"command\"\n *  text: (arg) => string, // a function that returns a string, hover over the 'text' field in your code for more thourough documentation\n *  arg: Argument, // hover over the 'arg' field in your code for more thourough documentation\n * }\n * ```\n* @example \n * Block method accepts 2 or more arguments\n * ```ts\n * {\n *  type: BlockType, // e.g. \"reporter\", \"command\"\n *  text: (...args) => string, // a function that returns a string, hover over the 'text' field in your code for more thourough documentation\n *  args: Argument[], // hover over the 'args' field in your code for more thourough documentation\n * }\n * ```\n * @returns A manipulated version of the original method that is\n */\nexport function block<\n  const This extends ExtensionInstance,\n  const Args extends any[],\n  const Return,\n  const Fn extends (...args: Args) => Return,\n  const TRemoveUtil extends any[] = Args extends [...infer R extends any[], BlockUtility] ? R : Args,\n>\n  (\n    blockInfoOrGetter: (BlockMetadata<(...args: TRemoveUtil) => Return> | ((this: This, self: This) => BlockMetadata<(...args: TRemoveUtil) => Return>))\n  ): TypedMethodDecorator<This, Args, Return, (...args: Args) => Return> {\n\n  return function (this: This, target: (this: This, ...args: Args) => Return, context: ClassMethodDecoratorContext<This, Fn>) {\n    const opcode = target.name;\n    const internalFuncName = getImplementationName(opcode);\n    context.addInitializer(function () { this.pushBlock(opcode, blockInfoOrGetter, target) });\n    return (function () { return this[internalFuncName].call(this, ...arguments) }) as Function as Fn;\n  };\n}\n\n\ntype BlockFromArgsAndReturn<Args extends any[], Return> = Args extends [...infer R extends any[], BlockUtility]\n  ? BlockMetadata<(...args: R) => Return> : BlockMetadata<(...args: Args) => Return>;\n\n/**\n * This is a short-hand for invoking the block command when your `blockType` is button\n * @param text \n * @returns \n * @see {@link block} \n * @example\n * // Ignore the leading \"_\"\n * _@buttonBlock(\"The text of button block\")\n * buttonMethod() {\n *    this.openUI(\"someUI\")\n * }\n * \n */\nexport function buttonBlock<\n  This extends ExtensionInstance,\n>(text: string): TypedMethodDecorator<This, [], void, () => void> {\n  type Args = [] | [BlockUtility];\n  type Return = void;\n  type Fn = (...args: Args) => Return;\n\n  return block<This, Args, Return, Fn>({\n    text,\n    type: BlockType.Button\n  });\n}","import { legacySupportWithInfoArgument } from \"$common/extension/mixins/optional/legacySupport\";\nimport { ExtensionMetadata, ExtensionBlockMetadata, ExtensionMenuItems, BlockOperation, Argument, ExtensionMenuMetadata, ExtensionDynamicMenu, Menu, DynamicMenuThatAcceptsReporters, BaseGenericExtension, VerboseArgument, DefineBlock, AbstractConstructor, NonAbstractConstructor, BlockMetadata } from \"$common/types\";\nimport { isFunction, isString } from \"$common/utils\";\nimport { block } from \"../blocks\";\nimport { ArgumentMethods, BlockDecorators, BlockDefinitions, BlockEntry, BlockMap, LegacyExtension, LegacyExtensionDecorator, LegacySupport, ObjectOrGetter } from \"./types\";\nimport { ExtensionInstance } from \"$common/extension\";\n\n/**\n * \n * @param info \n * @param flags \n * @returns \n */\nexport const legacy = <\n  const TInfo extends ExtensionMetadata,\n  TFlags extends { incrementalDevelopment: boolean } = undefined,\n  const TStrict extends boolean = TFlags extends { incrementalDevelopment: false } | undefined ? true : false\n>(info: TInfo, flags?: TFlags): LegacySupport<TInfo, TStrict> => ({\n\n  for<TExtension extends LegacyExtension<TInfo, TStrict>>() {\n\n    const legacyExtension = (): LegacyExtensionDecorator<TExtension> => (value, context) => {\n      abstract class LegacySupport extends legacySupportWithInfoArgument(value as AbstractConstructor<ExtensionInstance>, info) {\n        readonly originalClassName = context.name;\n      };\n\n      return LegacySupport as AbstractConstructor<ExtensionInstance> as NonAbstractConstructor<TExtension>;\n    };\n\n    const blockMethodBroker = getBlockMetaData(info).map(([opcode, entry]) => {\n      const key = opcode as keyof BlockDefinitions<TInfo, TExtension>;\n      return {\n        key,\n        definer: createBlockDefiner<TExtension & BaseGenericExtension>(entry),\n        decorator: createBlockDecorator<TExtension & ExtensionInstance>(entry)\n      }\n    });\n\n    const legacyDefinition = blockMethodBroker.reduce((definitions, { key, definer }) => {\n      definitions[key] = definer as any; // TODO: See if we can get this type to work\n      return definitions;\n    }, {} as BlockDefinitions<TInfo, TExtension>);\n\n\n    const legacyBlock = blockMethodBroker.reduce((decorators, { key, decorator }) => {\n      decorators[key] = decorator as any; // TODO: See if we can get this type to work\n      return decorators;\n    }, {} as BlockDecorators<TInfo>);\n\n    const throwTypeOnlyError = () => {\n      throw new Error(\"This property is not meant to be accessed, and is instead solely for type inference / documentation purposes.\")\n    };\n\n    return {\n      legacyExtension, legacyDefinition, legacyBlock,\n      ReservedNames: {\n        get Menus(): any { return throwTypeOnlyError() },\n        get Blocks(): any { return throwTypeOnlyError() },\n        get ArgumentNamesByBlock(): any { return throwTypeOnlyError() },\n      },\n    };\n  }\n})\n\n/**\n * Creates a function that returns a function that acts as a block definition for the 'entry' block metadata.\n * @param entry \n * @returns \n */\nconst createBlockDefiner = <TExtension extends ExtensionInstance & BaseGenericExtension>(entry: BlockEntry) =>\n  (objOrGetter: ObjectOrGetter<{ opertation: BlockOperation } & Partial<ArgumentMethods<any, any>>, TExtension>) =>\n    ((extension: TExtension) => {\n      const { operation, argumentMethods } = isFunction(objOrGetter) ? objOrGetter.call(extension, extension) : objOrGetter;\n      if (argumentMethods) attachArgumentMethods(entry, argumentMethods, extension);\n      return { ...entry, operation }\n    }) as DefineBlock<TExtension, BlockOperation>;\n\n/**\n * Creates a function that returns a decorator function that wraps the data contained within 'entry'.\n * @param entry \n * @returns \n */\nconst createBlockDecorator = <TExtension extends ExtensionInstance>(entry: BlockEntry) =>\n  (...params: ([ObjectOrGetter<ArgumentMethods<any, any>, TExtension>] | [])) => {\n    if (params.length === 0 || !params[0]) return block<TExtension, any[], any, any>(entry as BlockMetadata<any>);\n    const objOrGetter = params[0];\n    return block<TExtension, any[], any, any>((extension: TExtension) => {\n      const { argumentMethods } = isFunction(objOrGetter)\n        ? objOrGetter.call(extension, extension) : objOrGetter;\n\n      attachArgumentMethods(entry, argumentMethods, extension);\n      return entry as BlockMetadata<any>;\n    });\n  }\n\nconst attachArgumentMethods = (\n  block: ReturnType<BlockMap[\"get\"]>,\n  argumentMethods: Record<number, Partial<DynamicMenuThatAcceptsReporters<unknown>>>,\n  extension: ExtensionInstance\n) => {\n  const args = block.args ? block.args : block.arg ? [block.arg] : [];\n\n  Object.entries(argumentMethods)\n    .map(([indexKey, { handler, getItems }]) => {\n      const arg = args[parseInt(indexKey)] as VerboseArgument<any>;\n      return { arg, methods: { handler, getItems } }\n    })\n    .forEach(({ arg, methods }) =>\n      Object.entries(methods)\n        .filter(([_, method]) => method !== undefined)\n        .map(([key, method]) => [key, method.bind(extension)])\n        .forEach(([key, method]) => tryUpdateKey(arg, key, method)))\n}\n\nconst tryUpdateKey = <T extends Menu<any>>(arg: VerboseArgument<any>, key: string, value: T) => {\n  if (isFunction(arg.options)) arg.options = value;\n  arg.options[key] = value;\n}\n\nconst asBlockMetaData = (block: ExtensionBlockMetadata | string) => {\n  if (isString(block)) throw new Error(`Block defined as string, unexpected! ${block}`)\n  return block as ExtensionBlockMetadata;\n}\n\nconst convertAndInsertBlock = (map: BlockMap, block: ExtensionBlockMetadata, metadata: ExtensionMetadata) => {\n  const { opcode, arguments: _arguments, blockType: type } = block;\n  const { text, orderedNames } = parseText(block);\n\n  if (!_arguments) return map.set(opcode, { type, text });\n\n  const args = Object.entries(_arguments ?? {})\n    .map(([name, { menu, ...rest }]) => ({ options: extractMenuOptions(metadata, menu), name, menu, ...rest }))\n    .sort(({ name: a }, { name: b }) => orderedNames.indexOf(a) < orderedNames.indexOf(b) ? -1 : 1)\n    .map(({ name, ...details }) => details satisfies Argument<any> as Argument<unknown>);\n\n  const { length } = args;\n  return length >= 2\n    ? map.set(opcode, { type, text, args: args as [] })\n    : map.set(opcode, { type, text, arg: args[0] })\n}\n\nconst getBlockMetaData = (metadata: ExtensionMetadata) => Array.from(\n  metadata.blocks\n    .map(asBlockMetaData)\n    .reduce((map, block) => convertAndInsertBlock(map, block, metadata), new Map() as BlockMap)\n    .entries()\n);\n\nexport const parseText = ({ arguments: _arguments, text }: ExtensionBlockMetadata) => {\n  const placeholder = \"Error: This should have been overridden by legacy support\";\n\n  if (!_arguments) return { orderedNames: null as null, text: placeholder };\n\n  const args = Object.keys(_arguments)\n    .map(name => ({ name, template: `[${name}]` }))\n    .sort(({ template: a }, { template: b }) => text.indexOf(a) < text.indexOf(b) ? -1 : 1);\n\n  return args.length === 0\n    ? { orderedNames: null as null, text: placeholder }\n    : { orderedNames: args.map(({ name }) => name), text: () => placeholder }\n}\n\nconst getItemsPlaceholder = { getItems: () => (\"Error: This should have been filled in.\" as any) };\nconst handlerPlaceholder = { handler: () => (\"Error: This should have been filled in.\" as any) };\n\nexport const isDynamicMenu = (menu: ExtensionMenuMetadata | ExtensionMenuItems[\"items\"]): menu is ExtensionDynamicMenu => isString(menu);\n\nconst extractMenuOptions = (data: ExtensionMetadata, menuName: string): Menu<any> => {\n  const menu = menuName ? data.menus[menuName] : undefined;\n\n  if (!menu) return undefined;\n  if (isDynamicMenu(menu)) return getItemsPlaceholder.getItems;\n\n  const { items, acceptReporters: acceptsReporters } = menu;\n\n  if (!isDynamicMenu(items)) return acceptsReporters ? { acceptsReporters, items: [...items], ...handlerPlaceholder } : [...items];\n\n  return acceptsReporters ? { acceptsReporters, ...handlerPlaceholder, ...getItemsPlaceholder } : getItemsPlaceholder.getItems;\n}","import { ExtensionInstance } from \"$common/extension\";\nimport { AbstractConstructor, ExtensionArgumentMetadata, ExtensionBlockMetadata, ExtensionMenuMetadata, ExtensionMetadata } from \"$common/types\";\nimport { isString, set } from \"$common/utils\";\nimport { isDynamicMenu, parseText } from \"../../decorators/legacySupport/index\";\nimport { MinimalExtensionConstructor } from \"../required\";\nimport { getImplementationName, wrapOperation } from \"../required/scratchInfo/index\";\n\ntype WrappedOperation = ReturnType<typeof wrapOperation>;\ntype WrappedOperationParams = Parameters<WrappedOperation>;\ntype WithLegacySupport = InstanceType<ReturnType<typeof legacySupportMixin>>;\ntype BlockMap = Map<string, Omit<ExtensionBlockMetadata, \"opcode\"> & { index: number }>;\n\nexport const isLegacy = (extension: ExtensionInstance | WithLegacySupport): extension is WithLegacySupport => {\n  const key: keyof WithLegacySupport = \"__isLegacy\";\n  return key in extension;\n}\n\nconst validBlock = (legacyBlock: string | ExtensionBlockMetadata, blockMap: BlockMap): legacyBlock is ExtensionBlockMetadata => {\n  if (isString(legacyBlock)) throw new Error(\"Block was unexpectedly a string: \" + legacyBlock);\n  if (!blockMap.has(legacyBlock.opcode)) {\n    console.error(`Could not find legacy opcode ${legacyBlock.opcode} within currently defined blocks`);\n    return false;\n  };\n  return true;\n}\n\nconst validArg = (pair: { legacy: ExtensionArgumentMetadata, modern: ExtensionArgumentMetadata }): typeof pair => {\n  if (typeof pair.legacy.menu !== typeof pair.modern.menu) throw new Error(\"Menus don't match\")\n  return pair;\n}\n\nconst getDynamicMenuName = (menu: ExtensionMenuMetadata): string => {\n  if (isDynamicMenu(menu)) return menu;\n  if (isDynamicMenu(menu.items)) return menu.items;\n  throw new Error(\"Menu is not dynamic: \" + menu);\n}\n\n/**\n * Mixin the ability for extensions to make use of 'legacy' `getInfo` json, \n * so that extensions ported to the framework can support old, serialized projects\n * @param Ctor \n * @param legacyInfo \n * @returns \n */\nexport default function legacySupportMixin<T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithLegacySupport extends Ctor {\n    private validatedInfo: ExtensionMetadata;\n\n    protected abstract getLegacyInfo(): ExtensionMetadata;\n\n    public __isLegacy = true;\n    public orderArgumentNamesByBlock: Map<string, string[]> = new Map();\n\n    protected override getInfo(): ExtensionMetadata {\n      if (!this.validatedInfo) {\n        const info = super.getInfo();\n        this.validatedInfo = this.validateAndAttach(info);\n      }\n\n      return this.validatedInfo;\n    }\n\n    private getArgNames = (legacyBlock: ExtensionBlockMetadata) => {\n      const { opcode } = legacyBlock;\n\n      if (!this.orderArgumentNamesByBlock.has(opcode)) {\n        const { orderedNames } = parseText(legacyBlock);\n        this.orderArgumentNamesByBlock.set(opcode, orderedNames);\n      }\n\n      return this.orderArgumentNamesByBlock.get(opcode);\n    }\n\n    private validateAndAttach({ id, blocks, menus, ...metaData }: ExtensionMetadata): ExtensionMetadata {\n      const { id: legacyID, blocks: legacyBlocks, menus: legacyMenus } = this.getLegacyInfo();\n      const mutableBlocks = [...blocks as ExtensionBlockMetadata[]];\n\n      if (id !== legacyID) throw new Error(`ID mismatch! Legacy id: ${legacyID} vs. current id: ${id}`);\n\n      const blockMap = mutableBlocks.reduce(\n        (map, { opcode, ...block }, index) => map.set(opcode, { ...block, index }),\n        new Map() as BlockMap\n      );\n\n      const self = this;\n\n      const updates = legacyBlocks\n        .map(legacyBlock => validBlock(legacyBlock, blockMap) ? legacyBlock : undefined)\n        .filter(Boolean)\n        .map(legacyBlock => {\n          const { opcode, arguments: legacyArgs } = legacyBlock;\n          const { index, arguments: modernArgs } = blockMap.get(opcode);\n          const argNames = this.getArgNames(legacyBlock);\n\n          if (!argNames) return { replaceAt: { index, block: legacyBlock } };\n\n          const remapper = (args: Record<string, any>) => argNames.reduce(\n            (remap, current, index) => set(remap, index, args[current]),\n            {} as Record<number, any>);\n\n          const implementation: WrappedOperation = this[getImplementationName(opcode)];\n\n          this[opcode] = (\n            (...[args, util]: WrappedOperationParams) => implementation.call(self, remapper(args), util)\n          ).bind(self);\n\n          const menuUpdates = argNames\n            .map((legacyName, index) => ({ legacy: legacyArgs[legacyName], modern: modernArgs[index] }))\n            .map(validArg)\n            .map(({ legacy: { menu: legacyName }, modern: { menu: modernName } }) => ({ legacyName, modernName }))\n            .filter(menus => menus.legacyName && menus.modernName)\n            .map(({ legacyName, modernName }) =>\n              ({ legacyName, modernName, legacy: legacyMenus[legacyName], modern: menus[modernName] }))\n            .map(({ legacy, modern, legacyName, modernName }) => !isDynamicMenu(legacy) && !isDynamicMenu(legacy.items)\n              ? { type: \"static\" as const, legacy: legacyName, modern: modernName }\n              : { type: \"dynamic\" as const, legacy: legacyName, modern: modernName, methods: { legacy: getDynamicMenuName(legacy), modern: getDynamicMenuName(modern) } }\n            );\n\n          return { menuUpdates, replaceAt: { index, block: legacyBlock } };\n        });\n\n      updates.forEach(({ replaceAt: { index, block } }) => mutableBlocks[index] = block);\n\n      updates\n        .map(({ menuUpdates }) => menuUpdates)\n        .flat()\n        .filter(Boolean)\n        .map(menu => {\n          const { legacy } = menu;\n          if (legacy in menus) throw new Error(`Somehow, there was already a menu called ${legacy}, which will cause issues in the next step.`);\n          return menu;\n        })\n        .forEach(({ type, legacy, methods }) => {\n          menus[legacy] = legacyMenus[legacy];\n          if (type === \"dynamic\") self[methods.legacy] = () => self[methods.modern]();\n        });\n\n      return {\n        id, blocks: mutableBlocks, menus, ...metaData\n      };\n    }\n  }\n  return ExtensionWithLegacySupport\n}\n\n/**\n * Mixin the ability for extensions to make use of 'legacy' `getInfo` json, \n * so that extensions ported to the framework can support old, serialized projects\n * @param Ctor \n * @param legacyInfo \n * @returns \n */\nexport function legacySupportWithInfoArgument<T extends AbstractConstructor<ExtensionInstance>>(Ctor: T, legacyInfo: ExtensionMetadata) {\n  abstract class ExtensionWithLegacySupport extends legacySupportMixin(Ctor) {\n    protected getLegacyInfo() {\n      return legacyInfo;\n    }\n  }\n\n  return ExtensionWithLegacySupport\n}","import type Video from \"$scratch-vm/io/video\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\nconst Format = {\n  image: \"image-data\",\n  canvas: \"canvas\"\n} as const satisfies {\n  image: (typeof Video)[\"FORMAT_IMAGE_DATA\"],\n  canvas: (typeof Video)[\"FORMAT_CANVAS\"];\n}\n\ntype VideoFrameTypeByFormat = {\n  \"image-data\": ImageData,\n  \"canvas\": HTMLCanvasElement\n}\n\n/**\n * Mixin the ability for extensions to interact with the user's web cam video feed\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithVideoSupport extends Ctor {\n    private videoDevice: Video | null;\n\n    private get video(): Video | null {\n      this.videoDevice ??= this.runtime.ioDevices?.video;\n      return this.videoDevice;\n    };\n\n    /**\n     * Dimensions of the video frame\n     */\n    videoDimensions = { width: 480, height: 360 } as const;\n\n    /**\n     * Access the most recent frame captured by the web cam\n     * @param {\"image\" | \"canvas\"} format \n     * @returns \n     */\n    getVideoFrame<TFormat extends keyof typeof Format>(format: TFormat) {\n      return this.video?.getFrame({\n        format: Format[format]\n      }) as VideoFrameTypeByFormat[typeof Format[typeof format]]\n    }\n\n    setVideoTransparency(transparency: number) {\n      this.video?.setPreviewGhost(transparency);\n    }\n\n    /**\n     * Turn the video feed on so that it's frames can be accessed and the feed\n     * diplays within the game window.\n     * @param {boolean} mirror defaults to `true`\n     * @returns \n     */\n    enableVideo(mirror: boolean = true) {\n      if (!this.video) return;\n      this.video.enableVideo();\n      this.video.provider.mirror = mirror;\n    }\n\n    /**\n     * Disable the video feed\n     */\n    disableVideo() {\n      this.video?.disableVideo();\n    }\n  }\n\n  return ExtensionWithVideoSupport;\n}\n","import { AbstractConstructor } from \"$common/types\";\nimport addCostumes from \"./optional/addCostumes/index\";\nimport customArguments from \"./optional/customArguments/index\";\nimport customSaveData from \"./optional/customSaveData\";\nimport drawable from \"./optional/drawable\";\nimport legacySupport from \"./optional/legacySupport\";\nimport ui from \"./optional/ui\";\nimport video from \"./optional/video\";\nimport setTransparencyBlock from \"./optional/blocks/setVideoTransparency\";\nimport toggleVideoBlock from \"./optional/blocks/toggleVideoState\";\nimport { MinimalExtensionConstructor } from \"./required\";\n\nexport type Mixin<T> = (Ctor: MinimalExtensionConstructor) => AbstractConstructor<T>;\n\nexport const optionalMixins = {\n  customArguments,\n  ui,\n  customSaveData,\n  video,\n  drawable,\n  addCostumes,\n  legacySupport,\n  setTransparencyBlock,\n  toggleVideoBlock,\n} as const satisfies OptionalMixins satisfies Record<string, Mixin<unknown>>;\n\nexport type OptionalMixins<T extends MinimalExtensionConstructor = MinimalExtensionConstructor> = {\n  ui: typeof ui<T>;\n  customArguments: typeof customArguments<T>,\n  customSaveData: typeof customSaveData<T>,\n  video: typeof video<T>,\n  drawable: typeof drawable<T>,\n  addCostumes: typeof addCostumes<T>,\n  legacySupport: typeof legacySupport<T>,\n  setTransparencyBlock: typeof setTransparencyBlock<T>,\n  toggleVideoBlock: typeof toggleVideoBlock<T>\n}\n\nexport type MixinName = keyof typeof optionalMixins;\n\nexport type ExtensionWithFunctionality<TSupported extends MixinName[], TBase extends MinimalExtensionConstructor = MinimalExtensionConstructor> =\n  TSupported extends [infer Head, ...infer Tail]\n  /** Use `extends` to enable typescript to infer desired characteristics */\n  ? Head extends keyof OptionalMixins ? Tail extends (keyof OptionalMixins)[] ? TBase extends MinimalExtensionConstructor\n  /** Accumalate the TBase parameter */\n  ? ExtensionWithFunctionality<Tail, ReturnType<OptionalMixins<TBase>[Head]>>\n  /** Return never as Head, Tail, and TBase should never not meet the above type requirements */\n  : never : never : never\n  /** Base case */\n  : TBase;\n\nexport type ExtensionIntanceWithFunctionality<TSupported extends MixinName[]> = InstanceType<ExtensionWithFunctionality<TSupported>>;","import { openUI } from \"$common/ui\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\n/**\n * Mixin the ability for extensions to open up UI at-will\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithUISupport extends Ctor {\n\n    /**\n     * Open a UI in a modal window \n     * @param component The name of the svelte component / file to open (which should be stored within the same folder as your extension's `index.ts` file). \n     * You can optionally leave off the `.svelte` extension.\n     * @param label What to title the modal window that pops up (defaults to your extension's name if left blank)\n     */\n    openUI(component: string, label?: string) {\n      const { id, name, runtime } = this;\n      openUI(runtime, { id, name, component: component.replace(\".svelte\", \"\"), label });\n    }\n\n  }\n\n  return ExtensionWithUISupport;\n}\n","import { StageLayering, ValueOf } from \"$common/types\";\nimport { MinimalExtensionConstructor } from \"../required\";\n\ntype Handle = number;\n\ntype Renderer = {\n  /**\n   * Create a new bitmap skin from a snapshot of the provided bitmap data.\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} bitmapData - new contents for this skin.\n   * @param {!int} [costumeResolution=1] - The resolution to use for this bitmap.\n   * @param {?Array<number>} [rotationCenter] Optional: rotation center of the skin. If not supplied, the center of\n   * the skin will be used.\n   * @returns {!int} the ID for the new skin.\n   */\n  createBitmapSkin(bitmapData: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, costumeResolution?: number, rotationCenter?: Array<number> | null): Handle;\n  /**\n   * Create a new Drawable and add it to the scene.\n   * @param {string} group Layer group to add the drawable to\n   * @returns {int} The ID of the new Drawable.\n   */\n  createDrawable(group: string): Handle;\n  /**\n     * Update a drawable's visibility.\n     * @param {number} drawableID The drawable's id.\n     * @param {boolean} visible Will the drawable be visible?\n     */\n  updateDrawableVisible(drawableID: number, visible: boolean): void;\n  /**\n   * Update a drawable's visual effect.\n   * @param {number} drawableID The drawable's id.\n   * @param {string} effectName The effect to change.\n   * @param {number} value A new effect value.\n   */\n  updateDrawableEffect(drawableID: number, effectName: string, value: number): void;\n  /**\n   * Update a drawable's skin.\n   * @param {number} drawableID The drawable's id.\n   * @param {number} skinId The skin to update to.\n   */\n  updateDrawableSkinId(drawableID: Handle, skinId: Handle): void;\n  /**\n   * Update an existing bitmap skin, or create a bitmap skin if the previous skin was not bitmap.\n   * @param {!int} skinId the ID for the skin to change.\n   * @param {!ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imgData - new contents for this skin.\n   * @param {!number} bitmapResolution - the resolution scale for a bitmap costume.\n   * @param {?Array<number>} rotationCenter Optional: rotation center of the skin. If not supplied, the center of the\n   * skin will be used\n   */\n  updateBitmapSkin(skinId: Handle, imgData: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, bitmapResolution: number, rotationCenter?: Array<number> | null): void;\n  /**\n   * Destroy an existing skin. Do not use the skin or its ID after calling this.\n   * @param {!int} skinId - The ID of the skin to destroy.\n   */\n  destroySkin(skinId: number): void;\n  /**\n   * Destroy a Drawable, removing it from the scene.\n   * @param {int} drawableID The ID of the Drawable to remove.\n   * @param {string} group Group name that the drawable belongs to\n   */\n  destroyDrawable(drawableID: Handle, group: string): void;\n}\n\n/**\n * Mixin the ability for extensions to draw images into the canvas\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithDrawingSupport extends Ctor {\n    private renderer: Renderer;\n\n    /**\n     * Draw an item on screen using image data\n     * @param {ImageData | ImageBitmap} image \n     * @returns \n     */\n    protected createDrawable<T extends ImageData | ImageBitmap>(image: T) {\n      this.renderer ??= this.runtime.renderer;\n      const { renderer } = this;\n\n      if (!renderer) return null;\n\n      const skin = renderer.createBitmapSkin(image as ImageData, 1);\n      const drawable = renderer.createDrawable(StageLayering.VideoLayer);\n\n      renderer.updateDrawableSkinId(drawable, skin);\n\n      const setTransparency = (transparency: number) =>\n        renderer.updateDrawableEffect(drawable, 'ghost', transparency);\n\n      const setVisible = (visible: boolean = true) =>\n        renderer.updateDrawableVisible(drawable, visible);\n\n      const update = (image: ImageData | ImageBitmap) =>\n        renderer.updateBitmapSkin(skin, image as ImageData, 1);\n\n      const destroy = () => {\n        setVisible(false);\n        renderer.destroyDrawable(drawable, StageLayering.VideoLayer);\n        renderer.destroySkin(skin);\n      }\n\n      setTransparency(0);\n      setVisible(true);\n\n      return { setTransparency, setVisible, update, destroy }\n    }\n  }\n\n  return ExtensionWithDrawingSupport;\n}\n","export const getUrlHelper = (dimensions: { width: number, height: number }) => {\n  const canvas = document.body.appendChild(document.createElement(\"canvas\"));\n\n  const setDimensions = ({ width, height }: Parameters<typeof getUrlHelper>[0]) => {\n    if (canvas.width !== width) canvas.width = width;\n    if (canvas.height !== height) canvas.height = height;\n  };\n\n  setDimensions(dimensions);\n\n  canvas.hidden = true;\n  const context = canvas.getContext(\"2d\");\n\n  return {\n    /**\n     * \n     * @param image \n     * @returns \n     */\n    getDataURL(image: ImageData) {\n      const { width, height } = image;\n      setDimensions(image);\n      context.save();\n      context.clearRect(0, 0, width, height);\n      context.putImageData(image, 0, 0);\n      const url = canvas.toDataURL('image/png');\n      context.restore();\n      return url;\n    }\n  }\n}","import { block } from \"$common/extension/decorators/blocks\";\nimport { withDependencies } from \"../../dependencies\";\nimport { MinimalExtensionConstructor } from \"../../required\";\nimport video from \"../video\";\n\n/**\n * Mixin a 'setVideoTransparency' Block to control the transparency of the videofeed\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithSetVideoTransparencyBlock extends withDependencies(Ctor, video) {\n    /**\n     * A `command` block that takes a single number argument and uses it to set the transparency of the video feed.\n     * @param transparency What transparency to set -- a higher number is more transparent (thus '100' is fully invisible)\n     */\n    @block({\n      type: \"command\",\n      text: (transparency) => `Set video to ${transparency}% transparent`,\n      arg: \"number\"\n    })\n    setVideoTransparencyBlock(transparency: number) {\n      this.setVideoTransparency(transparency);\n    }\n  }\n\n  return ExtensionWithSetVideoTransparencyBlock;\n}\n","import { block } from \"$common/extension/decorators/blocks\";\nimport { withDependencies } from \"../../dependencies\";\nimport { MinimalExtensionConstructor } from \"../../required\";\nimport video from \"../video\";\n\n/**\n * Mixin a 'toggleVideo' Block to control whether the video feed is on, off, or flipped\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function <T extends MinimalExtensionConstructor>(Ctor: T) {\n  abstract class ExtensionWithToggleVideoBlock extends withDependencies(Ctor, video) {\n    /**\n     * A `command` block that sets the current video state\n     * @param state What state to set (\"on\", \"off\", or \"on (flipped)\")\n     * @returns \n     */\n    @block({\n      type: \"command\",\n      text: (state) => `Set video feed to ${state}`,\n      arg: { type: \"string\", options: [\"on\", \"off\", \"on (flipped)\"] }\n    })\n    toggleVideoBlock(state: \"off\" | \"on\" | \"on (flipped)\") {\n      if (state === \"off\") return this.disableVideo();\n      this.enableVideo(state === \"on\");\n    }\n  }\n\n  return ExtensionWithToggleVideoBlock;\n}\n","import Runtime from \"$scratch-vm/engine/runtime\";\n\nimport { AbstractConstructor, Environment, ExlcudeFirst } from \"$common/types\";\n\nexport type ExtensionConstructorParams = ConstructorParameters<typeof ConstructableExtension>;\nexport type AuxiliaryExtensionInfoParams = ExlcudeFirst<ExtensionConstructorParams>;\nexport type ExtensionBaseConstructor = AbstractConstructor<ExtensionBase>;\n\nexport abstract class ConstructableExtension {\n  /**\n   * @summary This member function (or 'method') will be called when a user adds your extension via the Extensions Menu (i.e. when your extension is instantiated)\n   * @example\n   * // Initialize class field(s)\n   * private count: number;\n   *\n   * init() {\n   *  count = 0;\n   * }\n   * @example\n   * // Interact with environment's runtime\n   * init(env: Environment) {\n   *  env.runtime.emit(RuntimeEvent.ProjectStart);\n   * }\n   * @example\n   * // Nothing to initialize\n   * init() {}\n   * @description This function is intended to behave exactly like a constructor, used to initialize the state of your extension.\n   *\n   * The reason we use this function INSTEAD of a constructor is so that the base Extension class can manage the construction of this class.\n   * \n   * This also allows us to enable this method to be async (if you'd like).\n   * @param {Environment} env An object that allows your Extension to interact with the Scratch Environment. Currently is a little bare, but will be expanded soon.\n   * Can be ommitted if not needed.\n   *\n   * For Scratch developers: The `runtime` property on env is the same as the runtime passed to non-Typescript-Framework Extension constructors\n   */\n  abstract init(env: Environment): void | Promise<void>;\n\n  protected async internal_init() {\n    const runtime = this.runtime;\n    return await Promise.resolve(this.init({\n      runtime,\n      get extensionManager() { return runtime.getExtensionManager() }\n    }));\n  }\n\n  /**\n   *\n   * @param runtime The 'runtime' connected to the scratch-vm that enables your extension to interact with the scratch workspace\n   * @param name The name of this extension.\n   * @param id The ID of this extension.\n   * @param blockIconURI\n   */\n  constructor(readonly runtime: Runtime, readonly name: string, readonly id: string, readonly blockIconURI: string) {\n  }\n}\n\nexport const extensionsMap = new Map<string, ExtensionBase>();\n\nexport abstract class ExtensionBase extends ConstructableExtension {\n  constructor(FORBIDDEN: never) {\n    // @ts-ignore\n    super(...arguments);\n    extensionsMap.set(this.id, this);\n  }\n}","import { ExtensionIntanceWithFunctionality, MixinName, optionalMixins } from \"..\";\nimport { ExtensionBaseConstructor } from \"../../ExtensionBase\";\n\n/**\n * Mixin the ability for extensions to check which optional mixins they support\n * @param Ctor \n * @returns \n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n */\nexport default function (Ctor: ExtensionBaseConstructor, supported: string[]) {\n  abstract class ExtensionWithConfigurableSupport extends Ctor {\n\n    supports<const TKey extends MixinName>(mixinName: TKey): this is typeof this & ExtensionIntanceWithFunctionality<[TKey]> {\n      return supported.includes(mixinName);\n    }\n  }\n\n  return ExtensionWithConfigurableSupport;\n}","import { ExtensionWithFunctionality, MixinName, optionalMixins } from \"./mixins/index\";\nimport { ExtensionBase } from \"./ExtensionBase\";\nimport scratchInfo from \"./mixins/required/scratchInfo\";\nimport supported from \"./mixins/required/supported\";\nimport { ExtensionMenuDisplayDetails, Writeable } from \"$common/types\";\nimport { tryCaptureDependencies } from \"./mixins/dependencies\";\n\nconst registerDetailsIdentifier = \"__registerMenuDetials\";\n\nconst tryAnnounceDetails = (details: ExtensionMenuDisplayDetails) => {\n  const isNode = typeof window === 'undefined';\n  if (isNode) global?.[registerDetailsIdentifier]?.(details);\n}\n\n/**\n * Creates the base class that your Extension should 'extend' which is compatible with your request. \n * \n * Your request will have the following two parts:\n * @param details The details about how your extension should display and behave within the Extensions Menu.\n * Only the `name` field is required, but before your extension can be officially published, \n * it will additionally need a `description`, `iconURL`, and `insetIconURL`\n * @param addOns An optional collection of specifiers about what functionality this extension should have.\n * In this way, the functionality your Extension has access to (through its base class) is configurable.\n * \n * To see what `addOns` you can specify, place your cursor after the details parameter and type a double quote (\"). \n * Your IDE (code editor) should then suggest what values you can provide (e.g. `\"ui\"`, `\"customArguments\"`, `\"customSaveData\"`, etc.). \n * \n * **Note:** The order of the `addOns` does not matter.\n * @returns \n * @example Defining an extension with a name and description (and no add ons)\n * ```ts\n * export default class Example extends extension({ name: \"Some Name\", description: \"Some description...\" }) {\n *  ...\n * }\n * ```\n * @example Defining an extension with a name and UI functionality\n * ```ts\n * export default class Example extends extension({ name: \"Some Name\" }, \"ui\") {\n *  ...\n * }\n * ```\n * @example Defining an extension with a name and UI & custom arguments functionality\n * ```ts\n * export default class Example extends extension({ name: \"Some Name\" }, \"ui\", \"customArguments\") {\n *  ...\n * }\n * ```\n */\nexport const extension = <const TSupported extends readonly MixinName[]>(\n  details: ExtensionMenuDisplayDetails,\n  ...addOns: Writeable<TSupported>\n): ExtensionWithFunctionality<[...TSupported]> & typeof ExtensionBase => {\n\n  tryAnnounceDetails(details);\n\n  const Base = scratchInfo(supported(ExtensionBase, addOns)) as ExtensionWithFunctionality<[...TSupported]>;\n\n  if (!addOns) return Base;\n\n  const { Result, allSupported } = recursivelyApplyMixinsAndDependencies(Base, addOns);\n  return supported(Result, Array.from(allSupported)) as typeof Result;\n}\n\nconst recursivelyApplyMixinsAndDependencies = <const TSupported extends readonly MixinName[]>(\n  Base: ExtensionWithFunctionality<[...TSupported]>,\n  addons: TSupported,\n  alreadyAdded: Set<MixinName> = new Set()\n): { Result: ExtensionWithFunctionality<[...TSupported]>, allSupported: Set<MixinName> } => {\n  const Result = addons\n    .filter(addon => !alreadyAdded.has(addon))\n    .map(key => {\n      alreadyAdded.add(key);\n      return key;\n    })\n    .map(key => optionalMixins[key])\n    .reduce((acc, mixin) => {\n      const { dependencies, MixedIn } = tryCaptureDependencies(() => mixin(acc));\n      return !dependencies\n        ? MixedIn\n        : recursivelyApplyMixinsAndDependencies(MixedIn, dependencies, alreadyAdded).Result as typeof MixedIn;\n    }, Base);\n\n  return { Result, allSupported: alreadyAdded }\n}\n\nexport const registerExtensionDefinitionCallback = (callback: (details: ExtensionMenuDisplayDetails) => void) =>\n  global[registerDetailsIdentifier] = (details) => {\n    if (!details) return;\n    callback(details);\n    delete global[registerDetailsIdentifier];\n  };\n\nexport type ExtensionConstructor<TSupported extends MixinName[] = []> = ReturnType<typeof extension<TSupported>>;\nexport type ExtensionInstance<TSupported extends MixinName[] = []> = InstanceType<ExtensionConstructor<TSupported>>;","import { ExtensionMenuDisplayDetails, ExtensionBlocks, BlockDefinitions, Translations } from \"$common/types\";\nimport { isFunction } from \"$common/utils\";\nimport { extension } from \"./index\";\nimport { getImplementationName } from \"./mixins/required/scratchInfo/index\";\n\n/**\n * @summary Base class for extensions implemented via the Typescript Extension Framework (using the \"generic\" strategy).\n * @example\n * class MyExtension extends Extension<\n *  { // Display details\n *    name: \"My Extension\",\n *    description: \"This is my extension\",\n *    iconURL: \"example.png\",\n *    insetIconURL: \"example.svg\"\n *  },\n *  { // Blocks\n *    myBlock: (someArg: number) => void;\n *  }\n * > {\n *  init(env: Environment): { ... };\n *  defineBlocks(): MyExtension[\"BlockDefinitions\"] { return ... }\n * }\n * @description Extension developers will create Typescript classes that `extend` (or 'inherit', or 'implement') this `Extension` class.\n *\n * In order to `extend` this class, you must first specify 2 generic type arguments, which effectively describe what kind of Extension you're implementing.\n *\n * More specifically, the 2 generic type arguments describe how this extension is presented to the user (by specifyng the details displayed in the Extensions Menu),\n * and what this Extension actually does (by specifying the blocks it will define).\n *\n * By declaring that we're extending an `Extension` with our specific generic type arguments,\n * Typescript holds us accountable to implement exactly what we said we would (all in order to make a working extension).\n *\n * This includes:\n * * Defining an `init` method, which is used INSTEAD of a constructor\n * * Defining a `defineBlocks` method that does just that: defines this extension's blocks\n * @template MenuDetails How the extension should display in the extensions menu\n * @template Blocks What kind of blocks this extension implements\n * @link https://www.typescriptlang.org/docs/handbook/2/generics.html Learn more about generics!\n */\n\nexport abstract class Extension<\n  MenuDetails extends ExtensionMenuDisplayDetails,\n  Blocks extends ExtensionBlocks\n> extends extension(undefined, \"ui\", \"customSaveData\", \"customArguments\") {\n\n  readonly BlockFunctions: Blocks;\n  readonly BlockDefinitions: BlockDefinitions<typeof this>;\n  readonly Translations: Translations<typeof this>;\n\n  /**\n   * @summary Extension member method that returns an object defining all blocks that belong to the extension.\n   * @description Every block your extension implements (defined by the second generic argument of the Extension class), will have an entry in the object return by this function.\n   * Each entry will either be an object or a function that returns an object that provides the:\n   * - type: the type of block\n   * - text: what is displayed on the block\n   * - arg or args: the arguments the block accepts\n   * - operation: the function that is called when the blocked is executed\n   * @example\n   * // Returning an object with two block definition function for 'someBlock'\n   * defineBlocks(): ExampleExtension[\"BlockDefinitions\"] {\n   *  return {\n   *    // Using object syntax\n   *    someBlock: {\n   *      type: BlockType.Reporter,\n   *      arg: ArgumentType.String,\n   *      text: (argument) => `Some text about ${argument}`,\n   *      operation: (argument) => {\n   *        // do something\n   *      }\n   *    },\n   *    // Using arrow function syntax\n   *    someBlock: (self: MyExtension) => ({\n   *      type: BlockType.Reporter,\n   *      arg: ArgumentType.String,\n   *      text: (argument) => `Some text about ${argument}`,\n   *      operation: (argument) => {\n   *        // do something\n   *      }\n   *    }),\n   *    // Using method function syntax\n   *    someOtherBlock(self: MyExtension) {\n   *      const type = BlockType.Reporter;\n   *      const arg = ArgumentType.String;\n   *      return {\n   *        arg, type,\n   *        text: (argument) => `Some text about ${argument}`,\n   *        operation: (argument) => {\n   *          // do something\n   *        }\n   *      }\n   *    }\n   *  }\n   * }\n   * @see BlockDefinitions\n   * @returns {BlockDefinitions<Blocks>} An object defining 'block definition' objects / functions for each block associated with this Extension.\n   */\n  abstract defineBlocks(): BlockDefinitions<Extension<MenuDetails, Blocks>>;\n\n  protected override async internal_init() {\n    await super.internal_init();\n    const blocks = this.defineBlocks();\n    const self = this;\n    for (const opcode in blocks) {\n      this.validateOpcode(opcode);\n      const block = blocks[opcode];\n      const { operation, text, arg, args, type } = isFunction(block) ? block.call(this, this) : block;;\n      this.pushBlock(opcode,\n        arg\n          ? { text, type, arg }\n          : args\n            ? { text, type, args }\n            : { text, type },\n        operation);\n      const internalFuncName = getImplementationName(opcode);\n      (this as unknown)[opcode] = function () { return self[internalFuncName].call(self, ...arguments); };\n    }\n  }\n\n  private validateOpcode(opcode: string) {\n    if (!(opcode in this)) return;\n\n    const error = `The Extension has a member defined as '${opcode}', ` +\n      `but that name should be reserved for the opcode of the block with the same name. ` +\n      `Please rename your member, and attach the \"validateGenericExtension\" decorator to your class ` +\n      `so that this can be an error in your IDE and not at runtime.`;\n\n    throw new Error(error);\n  }\n}\n","import { ExtensionBlocks, ExtensionMenuDisplayDetails } from \"$common/types\";\nimport { TypedClassDecorator } from \".\";\nimport { ExtensionConstructor } from \"..\";\nimport { Extension } from \"../GenericExtension\";\n\n/**\n * Used to validate (through type assertion) that a Generic Extension does not\n * define any members with the same name as one of its blocks. \n * \n * The Generic Extension `Extension` class predates this requirment of having no overlap between the keys of blocks and the members of the associated Extension \n * class, so this decorator is provided as an easy way to check and confirm a Generic Extension class is compliant.\n * \n * Runtime errors will also be produced if this condition is not met.\n * @param failure If this extension is not valid, this will be a type that displays the member names causing trouble. \n * @returns \n */\nexport const validGenericExtension = <const T extends Extension<ExtensionMenuDisplayDetails, ExtensionBlocks>>\n  (...failure: T extends Extension<any, infer Blocks> ? T extends { [k in keyof Blocks]?: any } ? [{ [k in keyof Blocks & keyof T]: \"Your class cannot have a member with this name, as it's a name of one of your blocks.\" }] : [] : never):\n  TypedClassDecorator<T, ConstructorParameters<ExtensionConstructor>> => {\n  return function (value, context) { }\n}"],"names":["ExtensionFramework","exports","BlockType","Boolean","Button","Command","Conditional","Event","Hat","Loop","Reporter","ArgumentType","Angle","Color","Number","String","Matrix","Note","Image","Custom","StageLayering","BackgroundLayer","VideoLayer","PenLayer","SpriteLayer","LayerGroups","Language","Azeri","Bahasa_Indonesia","Cymraeg","Dansk","Deutsch","Eesti","English","Euskara","Gaeilge","Galego","Hrvatski","isiZulu","Italiano","Kiswahili","Magyar","Nederlands","Norsk_Nynorsk","Polski","Rapa_Nui","Suomi","Svenska","LanguageKeys","Object","keys","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__esDecorate","ctor","descriptorIn","decorators","contextIn","initializers","extraInitializers","accept","f","TypeError","_","kind","key","target","descriptor","getOwnPropertyDescriptor","name","done","context","access","addInitializer","push","result","get","set","init","defineProperty","__runInitializers","thisArg","value","useValue","arguments","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","then","apply","untilObject","getter","delay","timeout","clearTimeout","setTimeout","isString","query","isFunction","toString","Function","isPrimitive","identity","x","untilExternalScriptLoaded","url","scriptLoaded","script","document","createElement","onload","onerror","async","src","body","appendChild","typesafeCall","fn","_this","args","container","assertSameLength","collections","size","reduce","add","Set","Error","openUIEvent","registerButtonCallbackEvent","customArgumentFlag","customArgumentCheck","dropdownStateFlag","dropdownEntryFlag","initDropdownState","openDropdownState","closeDropdownState","openUI","runtime","details","emit","registerButtonCallback","buttonID","callback","on","CssVar","constructor","root","this","parts","join","primary","secondary","tertiary","transparent","light","ui","text","motion","red","sound","control","data","pen","error","extensions","drop","color","modalOverlay","white","whiteDim","whiteTransparent","blackTransparent","primaryTransparent","lightTansparent","highlight","validRegEx","RegExp","invalidRegEx","guards","split","reverse","guardsRegEx","replaceAll","current","desired","saveDataKey","mixin","Ctor","saveDataHandler","undefined","save","toSave","extensionIDs","id","argumentManager","supports","customArgumentManager","saveData","_a","hooks","onSave","saveTo","load","saved","onLoad","getOrCreateCustomArgumentManager","loadFrom","RGB_BLACK","r","g","b","RGB_WHITE","static","decimal","hex","substr","a","replace","m","exec","parseInt","rgb","decimalToHex","rgbToDecimal","hexToRgb","hsv","h","Math","max","min","v","floor","q","rgb0","rgb1","fraction1","fraction0","Cast","isNaN","n","toLowerCase","toRgbColorObject","substring","decimalToRgb","toNumber","val","trim","v1","v2","n1","n2","isWhiteSpace","NaN","s1","s2","Infinity","LIST_INVALID","LIST_ALL","index","acceptAll","random","cast","castToType","argumentType","parseFloat","JSON","parse","toMatrix","toFlag","matrixString","Array","fill","map","matrix","flag","row","CustomArgumentManager","Map","pending","clearPending","setPending","update","entry","GetIdentifier","insert","request","tryResolve","getCurrentEntries","from","entries","filter","getEntry","requiresSave","obj","SaveKey","forEach","purgeStaleIDs","IsIdentifier","startsWith","IdentifierPrefix","Date","getTime","renderToDropdown","compononentConstructor","props","dropdownContainerClass","elements","getElementsByClassName","console","anchor","children","centerDropdownButton","style","margin","paddingLeft","paddingRight","textAlign","className","styleMod","assert","MockBitmapAdapter","makeImage","makeCanvas","resize","image","newWidth","newHeight","stretchWidthCanvas","width","height","getContext","imageSmoothingEnabled","drawImage","stretchHeightCanvas","convertResolution1Bitmap","dataURI","toDataURL","getResizedWidthHeight","oldWidth","oldHeight","STAGE_WIDTH","STAGE_HEIGHT","imageRatio","importBitmap","newSize","convertDataURIToBinary","resizedDataURI","BASE64_MARKER","base64Index","base64","raw","window","atob","rawLength","array","Uint8Array","ArrayBuffer","charCodeAt","bitmapAdapter","urlHelper","dependencyListeners","withDependencies","dependencies","pop","mixinsMap","callingContext","DrowpdownOpen","DropdownClose","Init","menuProbe","isSimpleStatic","menu","isArray","isSimpleDynamic","isStaticWithReporters","isDynamicWithReporters","getMenuName","convertMenuItemsToString","item","assign","asStaticMenu","items","acceptReporters","setMenu","options","menus","alreadyAddedIndex","menuIndex","addOptionsAndGetMenuName","format","identifier","description","extractHandlers","element","type","hasHandler","handler","getArgName","getArgumentType","arg","setDefaultValue","opcode","defaultValue","getDefaultValue","isInlineImage","convertToDisplayText","isDynamicText","textFunc","argPlaceholders","getImplementationName","inlineImageAccessError","wrapOperation","operation","argsFromScratch","blockUtility","castedArguments","param","scratchInfo","blockMap","pushBlock","definition","has","getInfo","info","blockIconURI","blocks","convertToInfo","collectMenus","block","isBlockGetter","argsKey","extractArgs","displayText","argumentsInfo","fromEntries","uri","accumulation","convertToArgumentInfo","blockType","getButtonID","bind","func","names","types","handlers","zipArgs","registerDynamicMenu","getItems","blockInfoOrGetter","internalFuncName","createBlockDefiner","objOrGetter","extension","argumentMethods","attachArgumentMethods","createBlockDecorator","params","indexKey","methods","method","tryUpdateKey","asBlockMetaData","getBlockMetaData","metadata","orderedNames","parseText","_b","rest","extractMenuOptions","sort","convertAndInsertBlock","placeholder","template","getItemsPlaceholder","handlerPlaceholder","isDynamicMenu","menuName","acceptsReporters","validBlock","legacyBlock","validArg","pair","legacy","modern","getDynamicMenuName","legacySupportMixin","__isLegacy","orderArgumentNamesByBlock","getArgNames","validatedInfo","super","validateAndAttach","metaData","legacyID","legacyBlocks","legacyMenus","getLegacyInfo","mutableBlocks","self","updates","legacyArgs","modernArgs","argNames","replaceAt","implementation","util","remap","remapper","menuUpdates","legacyName","modernName","flat","Format","canvas","video","videoDimensions","videoDevice","ioDevices","getVideoFrame","getFrame","setVideoTransparency","transparency","setPreviewGhost","enableVideo","mirror","provider","disableVideo","optionalMixins","ExtensionWithCustomArgumentSupport","customSaveData","makeCustomArgument","component","initial","acceptReportersHandler","stringify","acceptsReports","arr","processCustomArgumentHack","getComponent","extensionID","initialID","currentEntry","prevID","setEntry","setter","label","drawable","createDrawable","renderer","skin","createBitmapSkin","updateDrawableSkinId","setTransparency","updateDrawableEffect","setVisible","visible","updateDrawableVisible","updateBitmapSkin","destroy","destroyDrawable","destroySkin","addCostumes","addCostume","action","isRenderedTarget","warn","now","dimensions","setDimensions","hidden","getDataURL","clearRect","putImageData","restore","getUrlHelper","storage","dataFormat","DataFormat","PNG","assetType","AssetType","ImageBitmap","dataBuffer","asset","createAsset","assetId","costume","md5","getCostumes","setCostume","legacySupport","setTransparencyBlock","ExtensionWithSetVideoTransparencyBlock","setVideoTransparencyBlock","_setVideoTransparencyBlock_decorators","private","_instanceExtraInitializers","toggleVideoBlock","ExtensionWithToggleVideoBlock","state","_toggleVideoBlock_decorators","ConstructableExtension","internal_init","extensionManager","getExtensionManager","extensionsMap","ExtensionBase","FORBIDDEN","supported","mixinName","includes","registerDetailsIdentifier","addOns","global","tryAnnounceDetails","Base","Result","allSupported","recursivelyApplyMixinsAndDependencies","addons","alreadyAdded","addon","acc","MixedIn","createMixin","mixins","dependency","tryCaptureDependencies","Extension","_super","defineBlocks","validateOpcode","AuxiliaryExtensionInfo","Branch","Exit","Enter","First","Second","Third","Fourth","Fifth","Sixth","Seventh","FrameworkID","RuntimeEvent","ScriptGlowOn","ScriptGlowOff","BlockGlowOn","BlockGlowOff","HasCloudDataUpdate","TurboModeOn","TurboModeOff","RecordingOn","RecordingOff","ProjectStart","ProjectRunStart","ProjectRunStop","ProjectStopAll","StopForTarget","VisualReport","ProjectLoaded","ProjectChanged","ToolboxExtensionsNeedUpdate","TargetsUpdate","MonitorsUpdate","BlockDragUpdate","BlockDragEnd","ExtensionAdded","ExtensionFieldAdded","PeripheralListUpdate","PeripheralConnected","PeripheralDisconnected","PeripheralRequestError","PeripheralConnectionLostError","PeripheralScanTimeout","MicListening","BlocksInfoUpdate","RuntimeStarted","RuntimeDisposed","BlocksNeedUpdate","SaveDataHandler","ScratchBlocksConstants","OutputShapeHexagonal","OutputShapeRound","OutputShapeSquare","TargetType","Sprite","Stage","VariableType","Scalar","List","BrooadcastMessage","activeClass","buttonBlock","color$1","copyTo","source","decode","matchAll","replacements","match","code","fromCharCode","modified","encode","invalidCharacters","char","fetchWithTimeout","resource","controller","AbortController","abort","response","fetch","signal","getTextFromMenuItem","getValueFromMenuItem","isValidID","test","flags","for","blockMethodBroker","definer","decorator","legacyDefinition","definitions","throwTypeOnlyError","legacyExtension","LegacySupport","legacyInfo","ExtensionWithLegacySupport","legacySupportWithInfoArgument","originalClassName","ReservedNames","Menus","Blocks","ArgumentNamesByBlock","loadExternalScript","onError","px","numberOf","reactiveInvoke","extensionAssignment","funcName","reactiveSet","propertyName","registerExtensionDefinitionCallback","rgbToHex","splitOnCapitals","tryCastToArgumentType","onFailure","untilCondition","condition","untilExternalGlobalVariableLoaded","globalVariableName","untilReady","ready","untilTimePassed","timeMs","validGenericExtension","failure"],"mappings":"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"}